// <auto-generated />

#nullable enable

using CoreGraphics;
using Foundation;
using ObjCBindings;
using ObjCRuntime;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Runtime.Versioning;
using System.Threading.Tasks;

namespace TestNamespace;

[Register ("PropertyTests", true)]
public partial class PropertyTests
{
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selCountX = "count";
	static readonly NativeHandle selCountXHandle = Selector.GetHandle ("count");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selLineSpacingX = "lineSpacing";
	static readonly NativeHandle selLineSpacingXHandle = Selector.GetHandle ("lineSpacing");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSetLineSpacing_X = "setLineSpacing:";
	static readonly NativeHandle selSetLineSpacing_XHandle = Selector.GetHandle ("setLineSpacing:");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSizesX = "sizes";
	static readonly NativeHandle selSizesXHandle = Selector.GetHandle ("sizes");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selContainsAttachmentsX = "containsAttachments";
	static readonly NativeHandle selContainsAttachmentsXHandle = Selector.GetHandle ("containsAttachments");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selNameX = "name";
	static readonly NativeHandle selNameXHandle = Selector.GetHandle ("name");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSetName_X = "setName:";
	static readonly NativeHandle selSetName_XHandle = Selector.GetHandle ("setName:");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSurnamesX = "surnames";
	static readonly NativeHandle selSurnamesXHandle = Selector.GetHandle ("surnames");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSetSurnames_X = "setSurnames:";
	static readonly NativeHandle selSetSurnames_XHandle = Selector.GetHandle ("setSurnames:");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selAttributedStringByInflectingStringX = "attributedStringByInflectingString";
	static readonly NativeHandle selAttributedStringByInflectingStringXHandle = Selector.GetHandle ("attributedStringByInflectingString");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selDelegateX = "delegate";
	static readonly NativeHandle selDelegateXHandle = Selector.GetHandle ("delegate");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSetDelegate_X = "setDelegate:";
	static readonly NativeHandle selSetDelegate_XHandle = Selector.GetHandle ("setDelegate:");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selResultsX = "results";
	static readonly NativeHandle selResultsXHandle = Selector.GetHandle ("results");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSizeX = "size";
	static readonly NativeHandle selSizeXHandle = Selector.GetHandle ("size");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selAlphanumericCharacterSetX = "alphanumericCharacterSet";
	static readonly NativeHandle selAlphanumericCharacterSetXHandle = Selector.GetHandle ("alphanumericCharacterSet");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selLocaleX = "locale";
	static readonly NativeHandle selLocaleXHandle = Selector.GetHandle ("locale");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSetLocale_X = "setLocale:";
	static readonly NativeHandle selSetLocale_XHandle = Selector.GetHandle ("setLocale:");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selIsForPersonMassUseX = "isForPersonMassUse";
	static readonly NativeHandle selIsForPersonMassUseXHandle = Selector.GetHandle ("isForPersonMassUse");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSetForPersonMassUse_X = "setForPersonMassUse:";
	static readonly NativeHandle selSetForPersonMassUse_XHandle = Selector.GetHandle ("setForPersonMassUse:");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selIsLenientX = "isLenient";
	static readonly NativeHandle selIsLenientXHandle = Selector.GetHandle ("isLenient");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSetLenient_X = "setLenient:";
	static readonly NativeHandle selSetLenient_XHandle = Selector.GetHandle ("setLenient:");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selCanDrawX = "canDraw";
	static readonly NativeHandle selCanDrawXHandle = Selector.GetHandle ("canDraw");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSetCanDraw_X = "setCanDraw:";
	static readonly NativeHandle selSetCanDraw_XHandle = Selector.GetHandle ("setCanDraw:");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	static readonly NativeHandle class_ptr = Class.GetHandle ("PropertyTests");

	public override NativeHandle ClassHandle => class_ptr;

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	[DesignatedInitializer]
	[Export ("init")]
	public PropertyTests () : base (NSObjectFlag.Empty)
	{
		if (IsDirectBinding)
			InitializeHandle (global::ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("init")), "init");
		else
			InitializeHandle (global::ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, global::ObjCRuntime.Selector.GetHandle ("init")), "init");
	}

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	[EditorBrowsable (EditorBrowsableState.Advanced)]
	protected PropertyTests (NSObjectFlag t) : base (t) {}

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	[EditorBrowsable (EditorBrowsableState.Advanced)]
	protected internal PropertyTests (NativeHandle handle) : base (handle) {}

	[SupportedOSPlatform ("macos")]
	[SupportedOSPlatform ("ios")]
	[SupportedOSPlatform ("tvos")]
	[SupportedOSPlatform ("maccatalyst13.1")]
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public static partial Foundation.NSCharacterSet Alphanumerics
	{
		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		get
		{
			Foundation.NSCharacterSet ret;
			if (IsDirectBinding) {
				ret = throw new NotImplementedException();
			} else {
				ret = throw new NotImplementedException();
			}
			return ret;
		}
	}

	[SupportedOSPlatform ("macos")]
	[SupportedOSPlatform ("ios")]
	[SupportedOSPlatform ("tvos")]
	[SupportedOSPlatform ("maccatalyst13.1")]
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public virtual partial Foundation.NSAttributedString AttributedStringByInflectingString
	{
		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		get
		{
			Foundation.NSAttributedString ret;
			if (IsDirectBinding) {
				ret = throw new NotImplementedException();
			} else {
				ret = throw new NotImplementedException();
			}
			return ret;
		}
	}

	[SupportedOSPlatform ("macos")]
	[SupportedOSPlatform ("ios")]
	[SupportedOSPlatform ("tvos")]
	[SupportedOSPlatform ("maccatalyst13.1")]
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public virtual partial bool CanDraw
	{
		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		get
		{
			bool ret;
			if (IsDirectBinding) {
				ret = throw new NotImplementedException();
			} else {
				ret = throw new NotImplementedException();
			}
			return ret;
		}

		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		set
		{
			throw new NotImplementedException();
		}
	}

	[SupportedOSPlatform ("macos")]
	[SupportedOSPlatform ("ios")]
	[SupportedOSPlatform ("tvos")]
	[SupportedOSPlatform ("maccatalyst13.1")]
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public virtual partial bool ContainsAttachments
	{
		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		get
		{
			bool ret;
			if (IsDirectBinding) {
				ret = throw new NotImplementedException();
			} else {
				ret = throw new NotImplementedException();
			}
			return ret;
		}
	}

	[SupportedOSPlatform ("macos")]
	[SupportedOSPlatform ("ios")]
	[SupportedOSPlatform ("tvos")]
	[SupportedOSPlatform ("maccatalyst13.1")]
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public virtual partial UIntPtr Count
	{
		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		get
		{
			if (IsDirectBinding) {
				return global::ObjCRuntime.Messaging.UIntPtr_objc_msgSend (this.Handle, Selector.GetHandle ("count"));
			} else {
				return global::ObjCRuntime.Messaging.UIntPtr_objc_msgSendSuper (this.Handle, Selector.GetHandle ("count"));
			}
		}
	}

	[SupportedOSPlatform ("macos")]
	[SupportedOSPlatform ("ios")]
	[SupportedOSPlatform ("tvos")]
	[SupportedOSPlatform ("maccatalyst13.1")]
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public virtual partial bool ForPersonMassUse
	{
		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		get
		{
			bool ret;
			if (IsDirectBinding) {
				ret = throw new NotImplementedException();
			} else {
				ret = throw new NotImplementedException();
			}
			return ret;
		}

		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		set
		{
			throw new NotImplementedException();
		}
	}

	[SupportedOSPlatform ("macos")]
	[SupportedOSPlatform ("ios")]
	[SupportedOSPlatform ("tvos")]
	[SupportedOSPlatform ("maccatalyst13.1")]
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public virtual partial bool IsLenient
	{
		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		get
		{
			bool ret;
			if (IsDirectBinding) {
				ret = throw new NotImplementedException();
			} else {
				ret = throw new NotImplementedException();
			}
			return ret;
		}

		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		set
		{
			throw new NotImplementedException();
		}
	}

	[SupportedOSPlatform ("macos")]
	[SupportedOSPlatform ("ios")]
	[SupportedOSPlatform ("tvos")]
	[SupportedOSPlatform ("maccatalyst13.1")]
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public virtual partial nfloat LineSpacing
	{
		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		get
		{
			if (IsDirectBinding) {
				return global::ObjCRuntime.Messaging.nfloat_objc_msgSend (this.Handle, Selector.GetHandle ("lineSpacing"));
			} else {
				return global::ObjCRuntime.Messaging.nfloat_objc_msgSendSuper (this.Handle, Selector.GetHandle ("lineSpacing"));
			}
		}

		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		set
		{
			throw new NotImplementedException();
		}
	}

	[SupportedOSPlatform ("macos")]
	[SupportedOSPlatform ("ios")]
	[SupportedOSPlatform ("tvos")]
	[SupportedOSPlatform ("maccatalyst13.1")]
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	internal virtual partial Foundation.NSLocale Locale
	{
		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		get
		{
			Foundation.NSLocale ret;
			if (IsDirectBinding) {
				ret = throw new NotImplementedException();
			} else {
				ret = throw new NotImplementedException();
			}
			return ret;
		}

		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		set
		{
			throw new NotImplementedException();
		}
	}

	[SupportedOSPlatform ("macos")]
	[SupportedOSPlatform ("ios")]
	[SupportedOSPlatform ("tvos")]
	[SupportedOSPlatform ("maccatalyst13.1")]
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public virtual partial string Name
	{
		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		get
		{
			if (IsDirectBinding) {
				return CFString.FromHandle (global::ObjCRuntime.Messaging.NativeHandle_objc_msgSend (this.Handle, Selector.GetHandle ("name")), false)!;
			} else {
				return CFString.FromHandle (global::ObjCRuntime.Messaging.NativeHandle_objc_msgSendSuper (this.Handle, Selector.GetHandle ("name")), false)!;
			}
		}

		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		set
		{
			throw new NotImplementedException();
		}
	}

	[SupportedOSPlatform ("macos")]
	[SupportedOSPlatform ("ios")]
	[SupportedOSPlatform ("tvos")]
	[SupportedOSPlatform ("maccatalyst13.1")]
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public virtual partial string? Name
	{
		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		get
		{
			if (IsDirectBinding) {
				return CFString.FromHandle (global::ObjCRuntime.Messaging.NativeHandle_objc_msgSend (this.Handle, Selector.GetHandle ("name")), false);
			} else {
				return CFString.FromHandle (global::ObjCRuntime.Messaging.NativeHandle_objc_msgSendSuper (this.Handle, Selector.GetHandle ("name")), false);
			}
		}

		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		set
		{
			throw new NotImplementedException();
		}
	}

	[SupportedOSPlatform ("macos")]
	[SupportedOSPlatform ("ios")]
	[SupportedOSPlatform ("tvos")]
	[SupportedOSPlatform ("maccatalyst13.1")]
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public virtual partial string[] Name
	{
		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		get
		{
			if (IsDirectBinding) {
				return CFArray.StringArrayFromHandle (global::ObjCRuntime.Messaging.NativeHandle_objc_msgSend (this.Handle, Selector.GetHandle ("surnames")), false)!;
			} else {
				return CFArray.StringArrayFromHandle (global::ObjCRuntime.Messaging.NativeHandle_objc_msgSendSuper (this.Handle, Selector.GetHandle ("surnames")), false)!;
			}
		}

		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		set
		{
			throw new NotImplementedException();
		}
	}

	[SupportedOSPlatform ("macos")]
	[SupportedOSPlatform ("ios")]
	[SupportedOSPlatform ("tvos")]
	[SupportedOSPlatform ("maccatalyst13.1")]
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public virtual partial Foundation.NSMetadataItem[] Results
	{
		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		get
		{
			Foundation.NSMetadataItem[] ret;
			if (IsDirectBinding) {
				ret = throw new NotImplementedException();
			} else {
				ret = throw new NotImplementedException();
			}
			return ret;
		}
	}

	[SupportedOSPlatform ("macos")]
	[SupportedOSPlatform ("ios")]
	[SupportedOSPlatform ("tvos")]
	[SupportedOSPlatform ("maccatalyst13.1")]
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public virtual partial CoreGraphics.CGSize Size
	{
		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		get
		{
			if (IsDirectBinding) {
				return global::ObjCRuntime.Messaging.CGSize_objc_msgSend (this.Handle, Selector.GetHandle ("size"));
			} else {
				return global::ObjCRuntime.Messaging.CGSize_objc_msgSendSuper (this.Handle, Selector.GetHandle ("size"));
			}
		}
	}

	[SupportedOSPlatform ("macos")]
	[SupportedOSPlatform ("ios")]
	[SupportedOSPlatform ("tvos")]
	[SupportedOSPlatform ("maccatalyst13.1")]
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public virtual partial nuint[] Sizes
	{
		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		get
		{
			if (IsDirectBinding) {
				return global::ObjCRuntime.Messaging.NativeHandle_objc_msgSend (this.Handle, Selector.GetHandle ("sizes"));
			} else {
				return global::ObjCRuntime.Messaging.NativeHandle_objc_msgSendSuper (this.Handle, Selector.GetHandle ("sizes"));
			}
		}
	}

	[SupportedOSPlatform ("macos")]
	[SupportedOSPlatform ("ios")]
	[SupportedOSPlatform ("tvos")]
	[SupportedOSPlatform ("maccatalyst13.1")]
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public virtual partial Foundation.NSObject? WeakDelegate
	{
		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		get
		{
			Foundation.NSObject? ret;
			if (IsDirectBinding) {
				ret = throw new NotImplementedException();
			} else {
				ret = throw new NotImplementedException();
			}
			return ret;
		}

		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		set
		{
			throw new NotImplementedException();
		}
	}
	// TODO: add binding code here
}
