// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System.Linq;
using Microsoft.CodeAnalysis.CSharp;
using Xamarin.Tests;
using Xamarin.Utils;
using Xunit;

namespace Microsoft.Macios.Generator.Tests;

// Unit test that ensures that all the generator attributes are correctly added in the compilation initialization
public class BindingSourceGeneratorGeneratorTests : BaseGeneratorTestClass {

	const string usingImportInput = @"
using System;
using Foundation;
using ObjCBindings;
namespace TestNamespace;

[BindingType<Class> (Name = ""AVAudioPCMBuffer"", Flags=Class.DisableDefaultCtor)]
public partial class AVAudioPcmBuffer : AVAudioBuffer {
}
";


	const string usingImportOutput = @"// <auto-generated />

#nullable enable

using Foundation;
using ObjCBindings;
using ObjCRuntime;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Runtime.Versioning;
using System.Threading.Tasks;

namespace TestNamespace;

[Register (""AVAudioPCMBuffer"", true)]
public partial class AVAudioPcmBuffer
{
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	static readonly NativeHandle class_ptr = Class.GetHandle (""AVAudioPCMBuffer"");

	public override NativeHandle ClassHandle => class_ptr;

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	[EditorBrowsable (EditorBrowsableState.Advanced)]
	protected AVAudioPcmBuffer (NSObjectFlag t) : base (t) {}

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	[EditorBrowsable (EditorBrowsableState.Advanced)]
	protected internal AVAudioPcmBuffer (NativeHandle handle) : base (handle) {}
	// TODO: add binding code here
}
";

	[Theory]
	[AllSupportedPlatforms (usingImportInput, usingImportOutput)]
	public void CorrectUsingImports (ApplePlatform platform, string input, string expectedOutput)
	{
		// We need to create a compilation with the required source code.
		var (compilation, _) = CreateCompilation (platform, sources: input);

		// Run generators and retrieve all results.
		var driver = CSharpGeneratorDriver.Create (new BindingSourceGeneratorGenerator ());
		var runResult = driver.RunGenerators (compilation).GetRunResult ();
		Assert.Empty (runResult.Diagnostics);

		// ensure that we do have all the needed attributes present
		var generatedFile = runResult.GeneratedTrees.SingleOrDefault (t => t.FilePath.EndsWith ("AVAudioPcmBuffer.g.cs"));
		Assert.NotNull (generatedFile);
		Assert.Equal (expectedOutput, generatedFile.GetText ().ToString ());
	}
}
