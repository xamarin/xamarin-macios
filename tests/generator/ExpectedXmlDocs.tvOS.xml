<?xml version="1.0"?>
<doc>
    <assembly>
        <name>api0</name>
    </assembly>
    <members>
        <member name="T:XmlDocumentation.E1">
            <summary>
            Summary for E1
            </summary>
        </member>
        <member name="F:XmlDocumentation.E1.Value1">
            <summary>
            Summary for E1.Value1
            </summary>
        </member>
        <member name="T:XmlDocumentation.E2">
            <summary>
            Summary for E2
            </summary>
        </member>
        <member name="F:XmlDocumentation.E2.A">
            <summary>
            Summary for E2.A
            </summary>
        </member>
        <member name="T:XmlDocumentation.E2Extensions">
            <summary>Extension methods for the <see cref="T:XmlDocumentation.E2" /> enumeration.</summary>
        </member>
        <member name="M:XmlDocumentation.E2Extensions.GetConstant(XmlDocumentation.E2)">
            <summary>Retrieves the <see cref="T:Foundation.NSString" /> constant that describes <paramref name="self" />.</summary>
            <param name="self">The instance on which this method operates.</param>
        </member>
        <member name="M:XmlDocumentation.E2Extensions.GetValue(Foundation.NSString)">
            <summary>Retrieves the <see cref="T:XmlDocumentation.E2" /> value named by <paramref name="constant" />.</summary>
            <param name="constant">The name of the constant to retrieve.</param>
        </member>
        <member name="M:XmlDocumentation.E2Extensions.GetValue(ObjCRuntime.NativeHandle)">
            <summary>Retrieves the <see cref="T:XmlDocumentation.E2" /> value represented by the backing field value in <paramref name="handle" />.</summary>
            <param name="handle">The native handle with the name of the constant to retrieve.</param>
        </member>
        <member name="M:XmlDocumentation.E2Extensions.ToConstantArray(XmlDocumentation.E2[])">
            <summary>Converts an array of <see cref="T:XmlDocumentation.E2" /> enum values into an array of their corresponding constants.</summary>
            <param name="values">The array of enum values to convert.</param>
        </member>
        <member name="M:XmlDocumentation.E2Extensions.ToEnumArray(Foundation.NSString[])">
            <summary>Converts an array of <see cref="T:Foundation.NSString" /> values into an array of their corresponding enum values.</summary>
            <param name="values">The array if <see cref="T:Foundation.NSString" /> values to convert.</param>
        </member>
        <member name="T:XmlDocumentation.E3">
            <summary>
            Summary for E3
            </summary>
        </member>
        <member name="F:XmlDocumentation.E3.ErrorA">
            <summary>
            Summary for E3.ErrorA
            </summary>
        </member>
        <member name="T:XmlDocumentation.E3Extensions">
            <summary>Extension methods for the <see cref="T:XmlDocumentation.E3" /> enumeration.</summary>
            <remarks>
              <para>The extension method for the <see cref="T:XmlDocumentation.E3" /> enumeration can be used to fetch the error domain associated with these error codes.</para>
            </remarks>
        </member>
        <member name="M:XmlDocumentation.E3Extensions.GetDomain(XmlDocumentation.E3)">
            <summary>Returns the error domain associated with the XmlDocumentation.E3 value</summary>
            <param name="self">The enumeration value</param>
            <remarks>
              <para>See the <see cref="T:Foundation.NSError" /> for information on how to use the error domains when reporting errors.</para>
            </remarks>
        </member>
        <member name="T:XmlDocumentation.E4">
            <summary>
            Summary for E4
            </summary>
        </member>
        <member name="F:XmlDocumentation.E4.Bit1">
            <summary>
            Summary for E4.Bit1
            </summary>
        </member>
        <member name="F:XmlDocumentation.E4.Bit3">
            <summary>
            Summary for E4.Bit3
            </summary>
        </member>
        <member name="T:XmlDocumentation.Notification1">
            <summary>
            Summary for Notification1
            </summary>
        </member>
        <member name="P:XmlDocumentation.Notification1.ClassHandle">
            <summary>The Objective-C class handle for this class.</summary>
            <value>The pointer to the Objective-C class.</value>
            <remarks>
                Each managed class mirrors an unmanaged Objective-C class.
                This value contains the pointer to the Objective-C class.
                It is similar to calling the managed <see cref="M:ObjCRuntime.Class.GetHandle(System.String)" /> or the native <see href="https://developer.apple.com/documentation/objectivec/1418952-objc_getclass">objc_getClass</see> method with the type name.
            </remarks>
        </member>
        <member name="M:XmlDocumentation.Notification1.#ctor">
            <summary>Creates a new <see cref="T:XmlDocumentation.Notification1" /> with default values.</summary>
        </member>
        <member name="M:XmlDocumentation.Notification1.#ctor(Foundation.NSObjectFlag)">
            <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
            <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
            <remarks>
                <para>
                    This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the <see cref="T:Foundation.NSObject" />.
                    This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.
                    When developers invoke this constructor, they take advantage of a direct path that goes all the way up to <see cref="T:Foundation.NSObject" /> to merely allocate the object's memory and bind the Objective-C and C# objects together.
                    The actual initialization of the object is up to the developer.
                </para>
                <para>
                    This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.
                    Once the allocation has taken place, the constructor has to initialize the object.
                    With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.
                </para>
                <para>It is the developer's responsibility to completely initialize the object if they chain up using this constructor chain.</para>
                <para>
                    In general, if the developer's constructor invokes the corresponding base implementation, then it should also call an Objective-C init method.
                    If this is not the case, developers should instead chain to the proper constructor in their class.
                </para>
                <para>
                    The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic <see cref="T:Foundation.NSObject" /> allocation and runtime type registration.
                    Typically the chaining would look like this:
                </para>
                <example>
                        <code lang="csharp lang-csharp"><![CDATA[
            //
            // The NSObjectFlag constructor merely allocates the object and registers the C# class with the Objective-C runtime if necessary.
            // No actual initXxx method is invoked, that is done later in the constructor
            //
            // This is taken from the iOS SDK's source code for the UIView class:
            //
            [Export ("initWithFrame:")]
            public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
            {
                // Invoke the init method now.
                var initWithFrame = new Selector ("initWithFrame:").Handle;
                if (IsDirectBinding) {
                    Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
                } else {
                    Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
                }
            }
            ]]></code>
                </example>
            </remarks>
        </member>
        <member name="M:XmlDocumentation.Notification1.#ctor(ObjCRuntime.NativeHandle)">
            <summary>A constructor used when creating managed representations of unmanaged objects. Called by the runtime.</summary>
            <param name="handle">Pointer (handle) to the unmanaged object.</param>
            <remarks>
                <para>
                    This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.
                    Developers should not invoke this method directly, instead they should call <see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" /> as it will prevent two instances of a managed object pointing to the same native object.
                </para>
            </remarks>
        </member>
        <member name="P:XmlDocumentation.Notification1.ANotification">
            <summary>Summary for DocumentedNotification</summary>
        </member>
        <member name="T:XmlDocumentation.Notification1.Notifications">
            <summary>Notifications posted by the <see cref="T:XmlDocumentation.Notification1" /> class.</summary>
            <remarks>
               <para>This class contains various helper methods that allow developers to observe events posted in the notification hub (<see cref="T:Foundation.NSNotificationCenter" />).</para>
               <para>The methods defined in this class post events that invoke the provided method or lambda with a <see cref="T:Foundation.NSNotificationEventArgs" /> parameter, which contains strongly typed properties for the notification arguments.</para>
            </remarks>
        </member>
        <member name="M:XmlDocumentation.Notification1.Notifications.ObserveA(System.EventHandler{Foundation.NSNotificationEventArgs})">
            <summary>Strongly typed notification for the <see cref="P:XmlDocumentation.Notification1.ANotification" /> constant.</summary>
            <param name="handler">The handler that responds to the notification when it occurs.</param>
            <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObservers(System.Collections.Generic.IEnumerable{Foundation.NSObject})" />.</returns>
            <remarks>
              <para>This method can be used to subscribe to <see cref="P:XmlDocumentation.Notification1.ANotification" /> notifications.</para>
              <example>
              <code lang="csharp lang-csharp"><![CDATA[
            // Listen to all notifications posted for any object
            var token = Notification1.Notifications.ObserveA ((notification) => {
              Console.WriteLine ("Observed ANotification!");
            };
            
            // Stop listening for notifications
            token.Dispose ();
            ]]></code>
              </example>
            </remarks>
        </member>
        <member name="M:XmlDocumentation.Notification1.Notifications.ObserveA(Foundation.NSObject,System.EventHandler{Foundation.NSNotificationEventArgs})">
            <summary>Strongly typed notification for the <see cref="P:XmlDocumentation.Notification1.ANotification" /> constant.</summary>
            <param name="objectToObserve">The specific object to observe.</param>
            <param name="handler">The handler that responds to the notification when it occurs.</param>
            <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObservers(System.Collections.Generic.IEnumerable{Foundation.NSObject})" />.</returns>
            <remarks>
              <para>This method can be used to subscribe to <see cref="P:XmlDocumentation.Notification1.ANotification" /> notifications.</para>
              <example>
                <code lang="csharp lang-csharp"><![CDATA[
            // Listen to all notifications posted for a single object
            var token = Notification1.Notifications.ObserveA (objectToObserve, (notification) => {
              Console.WriteLine ($"Observed ANotification for {nameof (objectToObserve)}!");
            };
            
            // Stop listening for notifications
            token.Dispose ();
            ]]></code>
              </example>
            </remarks>
        </member>
        <member name="T:XmlDocumentation.OptionKeys">
            <summary>Summary for OptionKeys.</summary>
        </member>
        <member name="P:XmlDocumentation.OptionKeys.Option1">
            <summary>Summary for Option1Key.</summary>
        </member>
        <member name="T:XmlDocumentation.IP1">
            <summary>
            Summary for P1
            </summary>
        </member>
        <member name="M:XmlDocumentation.IP1.PMethod">
            <summary>
            Summary for P1.PMethod
            </summary>
        </member>
        <member name="M:XmlDocumentation.IP1._PMethod(XmlDocumentation.IP1)">
            <summary>
            Summary for P1.PMethod
            </summary>
        </member>
        <member name="M:XmlDocumentation.IP1.PAMethod">
            <summary>
            Summary for PA1.PMethod
            </summary>
        </member>
        <member name="M:XmlDocumentation.IP1._PAMethod(XmlDocumentation.IP1)">
            <summary>
            Summary for PA1.PMethod
            </summary>
        </member>
        <member name="M:XmlDocumentation.IP1.PMethodWithArgs(System.Int32)">
            <summary>
            Summary for P1.PMethodWithArgs
            </summary><param name="arg0">Docs for arg0.</param>
        </member>
        <member name="M:XmlDocumentation.IP1._PMethodWithArgs(XmlDocumentation.IP1,System.Int32)">
            <summary>
            Summary for P1.PMethodWithArgs
            </summary><param name="arg0">Docs for arg0.</param>
        </member>
        <member name="M:XmlDocumentation.IP1.PMethodWithUndocumentedArgs(System.Int32)">
            <summary>
            Summary for P1.PMethodWithArgs
            </summary>
        </member>
        <member name="M:XmlDocumentation.IP1._PMethodWithUndocumentedArgs(XmlDocumentation.IP1,System.Int32)">
            <summary>
            Summary for P1.PMethodWithArgs
            </summary>
        </member>
        <member name="P:XmlDocumentation.IP1.PProperty">
            <summary>
            Summary for P1.PProperty
            </summary>
        </member>
        <member name="P:XmlDocumentation.IP1.PAProperty">
            <summary>
            Summary for PA1.PProperty
            </summary>
        </member>
        <member name="T:XmlDocumentation.P1_Extensions">
            <summary>Extension methods to the <see cref="T:XmlDocumentation.IP1" /> interface to support all the methods from the P1 protocol.</summary>
            <remarks>
              <para>The extension methods for <see cref="T:XmlDocumentation.IP1" /> interface allow developers to treat instances of the interface as having all the optional methods of the original P1 protocol. Since the interface only contains the required members, these extension methods allow developers to call the optional members of the protocol.</para>
            </remarks>
        </member>
        <member name="M:XmlDocumentation.P1_Extensions.PMethod(XmlDocumentation.IP1)">
            <summary>
            Summary for P1.PMethod
            </summary>
        </member>
        <member name="M:XmlDocumentation.P1_Extensions.PMethodWithArgs(XmlDocumentation.IP1,System.Int32)">
            <summary>
            Summary for P1.PMethodWithArgs
            </summary><param name="arg0">Docs for arg0.</param>
        </member>
        <member name="M:XmlDocumentation.P1_Extensions.PMethodWithUndocumentedArgs(XmlDocumentation.IP1,System.Int32)">
            <summary>
            Summary for P1.PMethodWithArgs
            </summary>
        </member>
        <member name="M:XmlDocumentation.P1_Extensions.GetPProperty(XmlDocumentation.IP1)">
            <summary>
            Summary for P1.PProperty
            </summary>
        </member>
        <member name="M:XmlDocumentation.P1_Extensions.SetPProperty(XmlDocumentation.IP1,System.Int32)">
            <summary>
            Summary for P1.PProperty
            </summary>
        </member>
        <member name="M:XmlDocumentation.P1Wrapper.PAMethod">
            <summary>
            Summary for PA1.PMethod
            </summary>
        </member>
        <member name="P:XmlDocumentation.P1Wrapper.PAProperty">
            <summary>
            Summary for PA1.PProperty
            </summary>
        </member>
        <member name="T:XmlDocumentation.T1">
            <summary>
            Summary for T1
            </summary>
        </member>
        <member name="P:XmlDocumentation.T1.ClassHandle">
            <summary>The Objective-C class handle for this class.</summary>
            <value>The pointer to the Objective-C class.</value>
            <remarks>
                Each managed class mirrors an unmanaged Objective-C class.
                This value contains the pointer to the Objective-C class.
                It is similar to calling the managed <see cref="M:ObjCRuntime.Class.GetHandle(System.String)" /> or the native <see href="https://developer.apple.com/documentation/objectivec/1418952-objc_getclass">objc_getClass</see> method with the type name.
            </remarks>
        </member>
        <member name="M:XmlDocumentation.T1.#ctor">
            <summary>Creates a new <see cref="T:XmlDocumentation.T1" /> with default values.</summary>
        </member>
        <member name="M:XmlDocumentation.T1.#ctor(Foundation.NSObjectFlag)">
            <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
            <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
            <remarks>
                <para>
                    This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the <see cref="T:Foundation.NSObject" />.
                    This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.
                    When developers invoke this constructor, they take advantage of a direct path that goes all the way up to <see cref="T:Foundation.NSObject" /> to merely allocate the object's memory and bind the Objective-C and C# objects together.
                    The actual initialization of the object is up to the developer.
                </para>
                <para>
                    This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.
                    Once the allocation has taken place, the constructor has to initialize the object.
                    With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.
                </para>
                <para>It is the developer's responsibility to completely initialize the object if they chain up using this constructor chain.</para>
                <para>
                    In general, if the developer's constructor invokes the corresponding base implementation, then it should also call an Objective-C init method.
                    If this is not the case, developers should instead chain to the proper constructor in their class.
                </para>
                <para>
                    The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic <see cref="T:Foundation.NSObject" /> allocation and runtime type registration.
                    Typically the chaining would look like this:
                </para>
                <example>
                        <code lang="csharp lang-csharp"><![CDATA[
            //
            // The NSObjectFlag constructor merely allocates the object and registers the C# class with the Objective-C runtime if necessary.
            // No actual initXxx method is invoked, that is done later in the constructor
            //
            // This is taken from the iOS SDK's source code for the UIView class:
            //
            [Export ("initWithFrame:")]
            public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
            {
                // Invoke the init method now.
                var initWithFrame = new Selector ("initWithFrame:").Handle;
                if (IsDirectBinding) {
                    Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
                } else {
                    Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
                }
            }
            ]]></code>
                </example>
            </remarks>
        </member>
        <member name="M:XmlDocumentation.T1.#ctor(ObjCRuntime.NativeHandle)">
            <summary>A constructor used when creating managed representations of unmanaged objects. Called by the runtime.</summary>
            <param name="handle">Pointer (handle) to the unmanaged object.</param>
            <remarks>
                <para>
                    This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.
                    Developers should not invoke this method directly, instead they should call <see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" /> as it will prevent two instances of a managed object pointing to the same native object.
                </para>
            </remarks>
        </member>
        <member name="M:XmlDocumentation.T1.#ctor(System.String)">
            <summary>
            Summary for T2.#ctor(String)
            </summary>
        </member>
        <member name="M:XmlDocumentation.T1.Method">
            <summary>
            Summary for T1.Method
            </summary>
        </member>
        <member name="M:XmlDocumentation.T1.PAMethod">
            <summary>
            Summary for PA1.PMethod
            </summary>
        </member>
        <member name="M:XmlDocumentation.T1.PMethodWithArgs(System.Int32)">
            <summary>
            Summary for P1.PMethodWithArgs
            </summary><param name="arg0">Docs for arg0.</param>
        </member>
        <member name="M:XmlDocumentation.T1.PMethodWithUndocumentedArgs(System.Int32)">
            <summary>
            Summary for P1.PMethodWithArgs
            </summary>
        </member>
        <member name="P:XmlDocumentation.T1.PAProperty">
            <summary>
            Summary for PA1.PProperty
            </summary>
        </member>
        <member name="P:XmlDocumentation.T1.PProperty">
            <summary>
            Summary for P1.PProperty
            </summary>
        </member>
        <member name="P:XmlDocumentation.T1.Property">
            <summary>
            Summary for T1.Property
            </summary>
        </member>
        <member name="T:XmlDocumentation.TG1`2">
            <summary>
            Summary for TG1
            </summary>
        </member>
        <member name="P:XmlDocumentation.TG1`2.ClassHandle">
            <summary>The Objective-C class handle for this class.</summary>
            <value>The pointer to the Objective-C class.</value>
            <remarks>
                Each managed class mirrors an unmanaged Objective-C class.
                This value contains the pointer to the Objective-C class.
                It is similar to calling the managed <see cref="M:ObjCRuntime.Class.GetHandle(System.String)" /> or the native <see href="https://developer.apple.com/documentation/objectivec/1418952-objc_getclass">objc_getClass</see> method with the type name.
            </remarks>
        </member>
        <member name="M:XmlDocumentation.TG1`2.#ctor">
            <summary>Creates a new <see cref="T:XmlDocumentation.TG1`2" /> with default values.</summary>
        </member>
        <member name="M:XmlDocumentation.TG1`2.#ctor(Foundation.NSObjectFlag)">
            <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
            <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
            <remarks>
                <para>
                    This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the <see cref="T:Foundation.NSObject" />.
                    This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.
                    When developers invoke this constructor, they take advantage of a direct path that goes all the way up to <see cref="T:Foundation.NSObject" /> to merely allocate the object's memory and bind the Objective-C and C# objects together.
                    The actual initialization of the object is up to the developer.
                </para>
                <para>
                    This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.
                    Once the allocation has taken place, the constructor has to initialize the object.
                    With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.
                </para>
                <para>It is the developer's responsibility to completely initialize the object if they chain up using this constructor chain.</para>
                <para>
                    In general, if the developer's constructor invokes the corresponding base implementation, then it should also call an Objective-C init method.
                    If this is not the case, developers should instead chain to the proper constructor in their class.
                </para>
                <para>
                    The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic <see cref="T:Foundation.NSObject" /> allocation and runtime type registration.
                    Typically the chaining would look like this:
                </para>
                <example>
                        <code lang="csharp lang-csharp"><![CDATA[
            //
            // The NSObjectFlag constructor merely allocates the object and registers the C# class with the Objective-C runtime if necessary.
            // No actual initXxx method is invoked, that is done later in the constructor
            //
            // This is taken from the iOS SDK's source code for the UIView class:
            //
            [Export ("initWithFrame:")]
            public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
            {
                // Invoke the init method now.
                var initWithFrame = new Selector ("initWithFrame:").Handle;
                if (IsDirectBinding) {
                    Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
                } else {
                    Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
                }
            }
            ]]></code>
                </example>
            </remarks>
        </member>
        <member name="M:XmlDocumentation.TG1`2.#ctor(ObjCRuntime.NativeHandle)">
            <summary>A constructor used when creating managed representations of unmanaged objects. Called by the runtime.</summary>
            <param name="handle">Pointer (handle) to the unmanaged object.</param>
            <remarks>
                <para>
                    This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.
                    Developers should not invoke this method directly, instead they should call <see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" /> as it will prevent two instances of a managed object pointing to the same native object.
                </para>
            </remarks>
        </member>
        <member name="M:XmlDocumentation.TG1`2.TGMethod">
            <summary>
            Summary for TG1.TGMethod
            </summary>
        </member>
        <member name="P:XmlDocumentation.TG1`2.TGProperty">
            <summary>
            Summary for TG1.TGProperty
            </summary>
        </member>
        <member name="T:XmlDocumentation.OptionsA">
            <summary>Summary for OptionsA.</summary>
        </member>
        <member name="P:XmlDocumentation.OptionsA.Option1">
            <summary>Summary for Option1.</summary>
        </member>
        <member name="P:XmlDocumentation.OptionsB.Option1">
            <summary>Summary for Option1.</summary>
        </member>
    </members>
</doc>