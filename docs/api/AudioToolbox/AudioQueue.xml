<Documentation>
  <Docs DocId="P:AudioToolbox.AudioQueue.CurrentLevelMeter">
        <summary>Current Level meters, one per channel in the range zero (minimum) to one (maximum).</summary>
        <value>Array of level meters, one per audio channel.</value>
        <remarks>
          <para>
	    To use this property, make sure that you set the <see cref="P:AudioToolbox.AudioQueue.EnableLevelMetering" /> property on the queue.
	  </para>
          <para>
	    Use the <see cref="P:AudioToolbox.AudioQueue.CurrentLevelMeterDB" /> if you want to get the values in decibels.
	  </para>
          <example>
            <code lang="c#"><![CDATA[
class MyInputQueue : InputAudioQueue {
    public MyQueueInput (AudioStreamBasicDescription desc) : base (desc) 
    {
    	inputQueue.EnableLevelMetering = true;
    }
    
    protected virtual void OnInputCompleted (IntPtr audioQueueBuffer, 
                                             AudioTimeStamp timeStamp, 
                                             AudioStreamPacketDescription [] packetData)
    {
        var levels = CurrentLevelMeterDB;
        for (int channel = 0; channel < levels.Count; channel.Length)
    	Console.WriteLine ("Channel {0} Average Power: {1} Peak Power: {2}", 
                               channel, levels [channel].AveragePower, levels [channel].PeakPower);
        }
    }
}]]></code>
          </example>
        </remarks>
      </Docs>
  <Docs DocId="P:AudioToolbox.AudioQueue.CurrentLevelMeterDB">
        <summary>Current Level meters, one per channel in decibels.</summary>
        <value>Array of level meters, one per audio channel.</value>
        <remarks>
          <para>
	    To use this property, make sure that you set the <see cref="P:AudioToolbox.AudioQueue.EnableLevelMetering" /> property on the queue.
	  </para>
          <para>
	    Use the <see cref="P:AudioToolbox.AudioQueue.CurrentLevelMeter" /> if you want to get the values normalized to the range zero (minimum) to one (maximum).
	  </para>
          <example>
            <code lang="c#"><![CDATA[
class MyInputQueue : InputAudioQueue {
    public MyQueueInput (AudioStreamBasicDescription desc) : base (desc) 
    {
    	inputQueue.EnableLevelMetering = true;
    }
    
    protected virtual void OnInputCompleted (IntPtr audioQueueBuffer, 
                                             AudioTimeStamp timeStamp, 
                                             AudioStreamPacketDescription [] packetData)
    {
        var levels = CurrentLevelMeterDB;
        for (int channel = 0; channel < levels.Count; channel.Length)
    	Console.WriteLine ("Channel {0} Average Power: {1} Peak Power: {2}", 
                               channel, levels [channel].AveragePower, levels [channel].PeakPower);
        }
    }
}]]></code>
          </example>
        </remarks>
      </Docs>
</Documentation>