parameters:

- name: statusContext
  type: string 
  default: 'Windows Integration Tests'

- name: isPR
  type: boolean

- name: repositoryAlias
  type: string
  default: self

- name: commit
  type: string
  default: HEAD

- name: uploadPrefix
  type: string
  default: '$(MaciosUploadPrefix)'

- name: githubToken
  type: string

- name: xqaCertPass
  type: string

- name: retryCount
  type: number
  default: 3

steps:

- template: ../common/checkout.yml
  parameters:
    isPR: ${{ parameters.isPR }}
    repositoryAlias: ${{ parameters.repositoryAlias }}
    commit: ${{ parameters.commit }}

- pwsh: '& "$Env:SYSTEM_DEFAULTWORKINGDIRECTORY/$Env:BUILD_REPOSITORY_TITLE/tools/devops/automation/scripts/show_bot_info.ps1"'
  displayName: 'Show Bot Info'

- ${{ if or(contains(variables['Build.Reason'], 'ResourceTrigger'), contains(variables['Build.Reason'], 'BuildCompletion'), contains(variables['Build.DefinitionName'], 'xamarin-macios-ci-tests'), contains(variables['Build.DefinitionName'], 'xamarin-macios-pr-tests')) }}:
  - download: macios
    displayName: Download Build.props
    artifact: Build.props

  - download: macios
    displayName: Download package-test-libraries
    artifact: package-test-libraries

  - download: macios
    displayName: Download build-configuration
    artifact: build-configuration

  - download: macios
    displayName: Download not-signed-package
    artifact: not-signed-package

  - download: macios
    displayName: Download WorkloadRollback.json
    artifact: WorkloadRollback

  - pwsh: |
      Get-ChildItem -Path "$(Pipeline.Workspace)/macios" -Recurse -Force
    displayName: 'Display downloads'
    timeoutInMinutes: 5

  # the default location when downloading is $(Pipeline.Workspace)/<pipeline resource identifier>/<artifact name>
  - pwsh: |
      $source="$(Pipeline.Workspace)/macios"
      $destination="$(Build.SourcesDirectory)/artifacts"
      # move all the files from the source to the destination
      Move-Item -Path "$source" -Destination "$destination" -Force
    displayName: Move artifacts to the expected location

- ${{ else }}:
  - task: DownloadPipelineArtifact@2
    displayName: Download artifacts
    inputs:
      allowFailedBuilds: true
      path: $(Build.SourcesDirectory)/artifacts

- pwsh: |
    Get-ChildItem $(Build.SourcesDirectory)/artifacts -Recurse 
  displayName: "Debug downloads"

- pwsh: |
    try {
      Write-Host "Looking in '$(Build.SourcesDirectory)\\artifacts"
      Get-ChildItem "$(Build.SourcesDirectory)\\artifacts" -Recurse
    } catch {
      Write-Host "Exception occurred: $_"
    }
  displayName: 'List downloaded artifacts'
  continueOnError: true

- task: UseDotNet@2
  inputs:
    version: 8.x

- pwsh: $(Build.SourcesDirectory)/xamarin-macios/tools/devops/automation/scripts/initialize-test-output-variables.ps1
  displayName: Set output variables
  env:
    TESTS_LABEL: windows
    # TESTS_PLATFORM:

- pwsh: |
    & dotnet --version
    & dotnet --info
    & dotnet workload list
    # We don't care if anything went wrong here.
    exit 0
  displayName: 'Show .NET info'
  continueOnError: true

- task: AzureKeyVault@2
  inputs:
    azureSubscription: 'Xamarin - SDK Engineering - macios-team-pair-to-mac-ci'
    KeyVaultName: 'xamarin-ios-vault'
    SecretsFilter: 'RemoteMacIdRsa'
  displayName: 'Download id_rsa'

- pwsh: |
    $idRsaPath = "$(Get-Location)\id_rsa"
    Write-Host "##vso[task.setvariable variable=ID_RSA_PATH]$idRsaPath"
    Add-Content -Path "id_rsa"  -Value "$(RemoteMacIdRsa)"
    # We need to make sure the private key is only accessible by the current user,
    # otherwise ssh will complain and not use it.
    icacls id_rsa /inheritance:r
    $grant="$Env:USERNAME" + ":(R)"
    icacls id_rsa /grant:r $grant
  displayName: "Write and verify id_rsa"
  continueOnError: true

- pwsh: |
    Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY\\$Env:BUILD_REPOSITORY_TITLE\\tools\\devops\\automation\\scripts\\MaciosCI.psd1
    ssh -v -i "$(ID_RSA_PATH)" -o IdentitiesOnly=yes -o StrictHostKeyChecking=no builder@$Env:MAC_AGENT_IP pwd
    Invoke-SshDownload `
      -RemoteHost "$Env:MAC_AGENT_IP" `
      -RemoteUserName "$Env:MAC_AGENT_USER" `
      -Source "/Users/$Env:MAC_AGENT_USER/remote_build_testing/BuildId.txt" `
      -Target "BuildId.txt"

    $macBuildId = (Get-Content -Path BuildId.txt).Trim()
    Remove-Item -Path BuildId.txt # clean up after ourselves
    if ([string]::IsNullOrEmpty($macBuildId)) {
      throw "The mac we're trying to connect to ($($Env:MAC_AGENT_IP)) is not reserved for us anymore. If you're reran this job, please rerun all jobs instead."
    }
    $windowsBuildId = $Env:BUILD_BUILDID
    if ($macBuildId -ne $windowsBuildId) {
      throw "The mac we're trying to connect to ($($Env:MAC_AGENT_IP)) is reserved for a different build (with build id $($macBuildId)). If you're reran this job, please rerun all jobs instead."
    }
  displayName: "Verify ssh connection"

# This task fixes errors such as these:
#     error MSB4242: SDK Resolver Failure: "The SDK resolver "NuGetSdkResolver" failed while attempting to resolve the SDK "Microsoft.Build.NoTargets/3.3.0".
#                    Exception: "NuGet.Packaging.Core.PackagingException: Unable to find fallback package folder 'D:\Program Files (x86)\Microsoft Visual Studio\Shared\NuGetPackages'.
- pwsh: |
    try {
      New-Item -Path "D:\Program Files (x86)\Microsoft SDKs\" -Name "NuGetPackages" -ItemType "directory"
    } catch {
      Write-Host "Exception occurred: $_"
    }
    try {
      New-Item -Path "D:\Program Files (x86)\Microsoft SDKs\" -Name "Shared" -ItemType "directory"
    } catch {
      Write-Host "Exception occurred: $_"
    }
    try {
      New-Item -Path "D:\Program Files (x86)\Microsoft SDKs\Shared\" -Name "NuGetPackages" -ItemType "directory"
    } catch {
      Write-Host "Exception occurred: $_"
    }
    try {
      New-Item -Path "D:\Program Files (x86)\Microsoft Visual Studio\Shared\NuGetPackages" -Name "NuGetPackages" -ItemType "directory"
    } catch {
      Write-Host "Exception occurred: $_"
    }
  displayName: 'Create directories for NuGet'
  continueOnError: true

- pwsh: |
    & dotnet build "$(Build.SourcesDirectory)/$(BUILD_REPOSITORY_TITLE)/tests/dotnet/Windows/InstallDotNet.csproj" `
    --verbosity quiet `
    "-bl:$(Build.SourcesDirectory)/$(BUILD_REPOSITORY_TITLE)/tests/dotnet/Windows/install.binlog" `
    -p:DisableImplicitNuGetFallbackFolder=true
  displayName: 'Install custom .NET'

- pwsh: |
    $Env:DOTNET = "$(Build.SourcesDirectory)\$(BUILD_REPOSITORY_TITLE)\\tests\dotnet\Windows\\bin\dotnet\dotnet.exe"
    & dotnet build "$(Build.SourcesDirectory)/$(BUILD_REPOSITORY_TITLE)/tests/dotnet/Windows/InstallDotNet.csproj" `
      --verbosity quiet `
      "-bl:$(Build.SourcesDirectory)/$(BUILD_REPOSITORY_TITLE)/tests/dotnet/Windows/install-workloads.binlog" `
      -p:DisableImplicitNuGetFallbackFolder=true `
      -t:Install
  displayName: 'Install workloads'

- pwsh: |
    $path = "$(Build.SourcesDirectory)/artifacts/${{ parameters.uploadPrefix }}Build.props/Build.props"
    Write-Host "Move $path to $(BUILD_REPOSITORY_TITLE)"
    mv $path ./$(BUILD_REPOSITORY_TITLE)
  displayName: Relocate Build.props
  workingDirectory: $(Build.SourcesDirectory)

# this step replaces the test-libraries dir
- pwsh: |
    $zip = "$(Build.SourcesDirectory)/artifacts/${{ parameters.uploadPrefix }}package-test-libraries/package-test-libraries.zip"
    $target = "$(Build.SourcesDirectory)/$(BUILD_REPOSITORY_TITLE)"
    Expand-Archive -Force $zip -DestinationPath $target
    Get-ChildItem "$target" -Recurse
  workingDirectory: $(Build.SourcesDirectory)/$(BUILD_REPOSITORY_TITLE)
  displayName: Expand test libraries.
  timeoutInMinutes: 10

- pwsh: |
    & $(Build.SourcesDirectory)\$(BUILD_REPOSITORY_TITLE)\tests\dotnet\Windows\bin\dotnet\dotnet.exe `
        nuget push `
        "$(Build.SourcesDirectory)\$(BUILD_REPOSITORY_TITLE)\tests\test-libraries\nugets\FrameworksInRuntimesNativeDirectory\bin\Release\Xamarin.Tests.FrameworksInRuntimesNativeDirectory.1.0.0.nupkg" `
        --source "$(Build.SourcesDirectory)\$(BUILD_REPOSITORY_TITLE)\tests\.nuget\packages"
  displayName: 'Build dependencies for .NET tests'
  continueOnError: true

- pwsh: |
    $runsettings = @"
    <?xml version="1.0" encoding="utf-8"?>
    <RunSettings>
      <RunConfiguration>
        <DotNetHostPath>$(Build.SourcesDirectory)\$(BUILD_REPOSITORY_TITLE)\tests\dotnet\Windows\bin\dotnet\dotnet.exe</DotNetHostPath>
      </RunConfiguration>
    </RunSettings>
    "@
    Set-Content -Path $(Build.SourcesDirectory)/$(BUILD_REPOSITORY_TITLE)/tests/dotnet/Windows/config.runsettings -Value $runsettings
    Get-Content -Path $(Build.SourcesDirectory)/$(BUILD_REPOSITORY_TITLE)/tests/dotnet/Windows/config.runsettings | Write-Host
  displayName: 'Create runsettings for .NET tests'

- pwsh: $(Build.SourcesDirectory)\$(BUILD_REPOSITORY_TITLE)\tools\devops\automation\scripts\run-local-windows-tests.ps1
  displayName: 'Run .NET tests locally'
  timeoutInMinutes: 30
  continueOnError: true
  ${{ if not(parameters.isPR) }}:
    retryCountOnTaskFailure: ${{ parameters.retryCount }}

- pwsh: $(Build.SourcesDirectory)\$(BUILD_REPOSITORY_TITLE)\tools\devops\automation\scripts\run-remote-windows-tests.ps1
  displayName: 'Run .NET tests remotely'
  timeoutInMinutes: 120
  continueOnError: true
  ${{ if not(parameters.isPR) }}:
    retryCountOnTaskFailure: ${{ parameters.retryCount }}
  env:
    XMA_PASSWORD: $(XMA.Password)

- pwsh: |
    Write-Host "There are test failures, so failing the build"
    exit 1
  displayName: 'Fail if test failures'
  timeoutInMinutes: 1
  condition: eq(variables['Agent.JobStatus'], 'SucceededWithIssues')

- pwsh: $(Build.SourcesDirectory)\$(BUILD_REPOSITORY_TITLE)\tools\devops\automation\scripts\fetch-remote-binlogs.ps1
  displayName: 'Fetch remote binlogs'
  timeoutInMinutes: 5
  condition: always()
  continueOnError: true
  env:
    XMA_PASSWORD: $(XMA.Password)

- pwsh: |
    Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY\\$Env:BUILD_REPOSITORY_TITLE\\tools\\devops\\automation\\scripts\\MaciosCI.psd1
    $configFile = "$(Build.SourcesDirectory)\\artifacts\\${{ parameters.uploadPrefix }}build-configuration\\configuration.json"
    $config = Import-BuildConfiguration -ConfigFile $configFile
    $config | Write-Host
  name: configuration
  continueOnError: true
  displayName: 'Parse build configuration'
  timeoutInMinutes: 1

- pwsh: $(System.DefaultWorkingDirectory)/$(BUILD_REPOSITORY_TITLE)/tools/devops/automation/scripts/run-generator-tests-on-windows.ps1
  displayName: 'Run generator tests'

- pwsh: $(Build.SourcesDirectory)\xamarin-macios\tools\devops\automation\scripts\prepare-windows-test-results.ps1
  displayName: 'Prepare tests results and Html Report'
  timeoutInMinutes: 5
  condition: always()

# Upload TestSummary as an artifact.
- task: PublishPipelineArtifact@1
  displayName: 'Publish Artifact: TestSummary'
  inputs:
    targetPath: 'xamarin-macios/tests/TestSummary.md'
    artifactName: '${{ parameters.uploadPrefix }}TestSummary-windows-integration-$(System.JobAttempt)'
  continueOnError: true
  condition: succeededOrFailed()

- pwsh: |
    $summaryName = "TestSummary-windows-integration.md"
    $summaryPath = "$Env:SYSTEM_DEFAULTWORKINGDIRECTORY/xamarin-macios/tests/TestSummary.md"
    if (Test-Path -Path $summaryPath -PathType Leaf) {
      Write-Host "##vso[task.addattachment type=Distributedtask.Core.Summary;name=$summaryName;]$summaryPath"
    }
  displayName: Set TestSummary
  continueOnError: true
  condition: succeededOrFailed()

# Archive files for the Html Report so that the report can be easily uploaded as artifacts of the build.
- task: ArchiveFiles@1
  displayName: 'Archive HtmlReport'
  inputs:
    rootFolder: '$(Build.SourcesDirectory)/$(BUILD_REPOSITORY_TITLE)/jenkins-results'
    includeRootFolder: false
    archiveFile: '$(Build.ArtifactStagingDirectory)/HtmlReport.zip'
  continueOnError: true
  condition: succeededOrFailed()

# Create HtmlReport artifact. This serves two purposes:
# 1. It is the way we are going to share the HtmlReport with the publish_html job that is executed on a Windows machine.
# 2. Users can download this if they want.
- task: PublishPipelineArtifact@1
  displayName: 'Publish Artifact: HtmlReport'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/HtmlReport.zip'
    artifactName: '${{ parameters.uploadPrefix }}HtmlReport-windows-integration-$(System.JobAttempt)'
  continueOnError: true
  condition: succeededOrFailed()

- pwsh: |
    Write-Host "Run windows tests."
    Write-Host "Mac agent to be used:"
    Write-Host "Mac agent pool: $Env:MAC_AGENT_POOL"
    Write-Host "Mac agent name: $Env:MAC_AGENT_NAME"
    Write-Host "Mac agent IP: $Env:MAC_AGENT_IP"
    Write-Host "Mac agent SYSTEM_DEFAULTWORKINGDIRECTORY: $Env:MAC_AGENT_SYSTEM_DEFAULTWORKINGDIRECTORY"
    Write-Host "Mac agent BUILD_SOURCESDIRECTORY: $Env:MAC_AGENT_BUILD_SOURCESDIRECTORY"
  displayName: Run tests

# Upload all the binlogs
# Copy all the binlogs to a separate directory, keeping directory structure.
- pwsh: |
    $sourceDir = '$(Build.SourcesDirectory)\$(BUILD_REPOSITORY_TITLE)'
    $targetDir = '$(Build.ArtifactStagingDirectory)\windows-binlogs'
    New-Item -Path "$targetDir" -ItemType "directory" -Force

    $binlogs = Get-ChildItem $sourceDir -Recurse -Include "*.binlog"
    foreach ($binlog in $binlogs) {
        $targetFile = $targetDir + $binlog.FullName.SubString($sourceDir.Length);
        New-Item -ItemType File -Path $targetFile -Force
        Copy-Item $binlog.FullName -destination $targetFile
    }
  displayName: Copy all binlogs
  continueOnError: true
  condition: succeededOrFailed()

# Publish all the binlogs we collected in the previous step
- task: PublishPipelineArtifact@1
  displayName: 'Publish Artifact: Windows binlogs'
  inputs:
    targetPath: $(Build.ArtifactStagingDirectory)/windows-binlogs
    artifactName: windows-binlogs-test-$(Build.BuildId)-$(System.StageAttempt)-$(System.StageAttempt)-$(System.JobAttempt)
  continueOnError: true
  condition: succeededOrFailed()

# Make sure to report any errors
- pwsh: |
    Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY\$Env:BUILD_REPOSITORY_TITLE\tools\devops\automation\scripts\MaciosCI.psd1
    $githubComments = New-GitHubCommentsObjectFromUrl -Url "$(Build.Repository.Uri)" -Token $(GitHub.Token) -Hash $Env:COMMENT_HASH

    if (Test-Path -Path "$Env:GITHUB_FAILURE_COMMENT_FILE" -PathType Leaf)  {
      $githubComments.NewCommentFromFile("${{ parameters.statusContext }} failed", ":x:", "$Env:GITHUB_FAILURE_COMMENT_FILE", "windows tests")
    } elseif ("$($Env:AGENT_JOBSTATUS)" -ne "Succeeded") {
      $message = ":x: $($Env:AGENT_JOBSTATUS) :x:"
      $githubComments.NewCommentFromMessage("${{ parameters.statusContext }} failed", ":x:", $message, "windows tests")
    } else {
      $message = ":white_check_mark: **All** ${{ parameters.statusContext }} passed."
      $githubComments.NewCommentFromMessage("${{ parameters.statusContext }} passed", ":computer:", $message, "windows tests")
    }
  displayName: 'Report results to GitHub'
  timeoutInMinutes: 5
  condition: always() # in particular we care if something failed, but let's always run just in case
  continueOnError: true
  env:
    CONTEXT: ${{ parameters.statusContext }}
    GITHUB_TOKEN: $(GitHub.Token)
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    TEST_BOT: $(Agent.Name)
    ${{ if eq(parameters.repositoryAlias, 'self') }}:
      COMMENT_HASH: $(fix_commit.GIT_HASH)
    ${{ else }}:
      COMMENT_HASH: $(Build.SourceVersion)

- pwsh: |
    Remove-Item "$(ID_RSA_PATH)"
  displayName: "Remove secrets"
  condition: always()
  continueOnError: true
