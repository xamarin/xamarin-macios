# yamllint disable rule:line-length
parameters:
  - name: vsdropsPrefix
    type: string

  - name: keyringPass
    type: string

  - name: gitHubToken
    type: string

  - name: xqaCertPass
    type: string

  - name: isPR
    type: boolean
    default: false

  - name: repositoryAlias
    type: string
    default: self

  - name: commit
    type: string
    default: HEAD

  - name: buildSteps
    type: stepList
    default: []

  - name: makeParallelism
    type: string
    default: '8'

  - name: uploadPrefix
    type: string
    default: '$(MaciosUploadPrefix)'

  - name: retryCount
    type: number
    default: 3

  - name: use1ES
    type: boolean
    default: true

  - name: disableCodeQL
    type: boolean
    default: true

steps:

  - template: ../common/checkout.yml
    parameters:
      isPR: ${{ parameters.isPR }}
      repositoryAlias: ${{ parameters.repositoryAlias }}
      commit: ${{ parameters.commit }}

  - template: ../common/setup.yml
    parameters:
      disableCodeQL: ${{ parameters.disableCodeQL }}
      keyringPass: ${{ parameters.keyringPass }}

  - template: install-certificates.yml@yaml-templates
    parameters:
      DeveloperIdApplication: $(developer-id-application)
      DeveloperIdInstaller: $(developer-id-installer)
      IphoneDeveloper: $(iphone-developer)
      MacDeveloper: $(mac-developer)
      HostedMacKeychainPassword: ${{ parameters.keyringPass }}

  - bash: |
      make -C $(Build.SourcesDirectory)/$(BUILD_REPOSITORY_TITLE)/tools/devops provisioning
    displayName: 'Generate provisionator files.'

  - task: xamops.azdevex.provisionator-task.provisionator@2
    displayName: 'Provision Products & Frameworks'
    inputs:
      provisioning_script: $(Build.SourcesDirectory)/$(BUILD_REPOSITORY_TITLE)/tools/devops/build-provisioning.csx
      provisioning_extra_args: '-vvvv'
      github_token: ${{ parameters.gitHubToken }}
    timeoutInMinutes: 250
    retryCountOnTaskFailure: ${{ parameters.retryCount }}  # mono does give issues sometimes to download, we will retry

  # Use the env variables that were set by the label parsing in the configure step
  # print some useful logging to allow to know what is going on AND allow make some
  # choices, there are labels that contradict each other (skip-package vs build-packages)
  # we use warnings for those case we are not sure about.
  - task: PowerShell@2
    name: configuration
    displayName: "Parse PR labels"
    timeoutInMinutes: 5
    inputs:
      filePath: $(System.DefaultWorkingDirectory)/$(BUILD_REPOSITORY_TITLE)/tools/devops/automation/scripts/parse_pr_labels.ps1
      arguments: -XamarinTop "$(Build.SourcesDirectory)/$(BUILD_REPOSITORY_TITLE)/" -BuildReason "$(Build.Reason)"

  - ${{ if contains(variables['Build.DefinitionName'], 'private') }}:
      - task: PowerShell@2
        displayName: Setup Private Feeds Credentials
        inputs:
          filePath: $(System.DefaultWorkingDirectory)/$(BUILD_REPOSITORY_TITLE)/eng/common/SetupNugetSources.ps1
          arguments: -ConfigFile $(System.DefaultWorkingDirectory)/$(BUILD_REPOSITORY_TITLE)/NuGet.config -Password $Env:Token
        env:
          Token: $(dn-bot-dnceng-artifact-feeds-rw)

      - bash: |
          set -x
          set -e
          ARGS="--azure-feed \"https://dotnetclimsrc.blob.core.windows.net/dotnet\" -FeedCredential $CREDENTIALS"
          echo "##vso[task.setvariable variable=DOTNET_INSTALL_EXTRA_ARGS]$ARGS"
        env:
          CREDENTIALS: $(dotnetclimsrc-read-sas-token)
        displayName: "Configure install extra args"
        timeoutInMinutes: 5

  - bash: $(System.DefaultWorkingDirectory)/$(BUILD_REPOSITORY_TITLE)/tools/devops/automation/scripts/bash/configure-build.sh
    env:
      ${{ if eq(parameters.isPR, true) }}:
        IsPR: 'True'
      ${{ else }}:
        IsPR: 'False'
    displayName: "Configure build"
    workingDirectory: "$(Build.SourcesDirectory)/$(BUILD_REPOSITORY_TITLE)"
    timeoutInMinutes: 5

  - bash: |
      set -x
      set -e
      cat configure.inc
    displayName: "Print configuration"
    workingDirectory: "$(Build.SourcesDirectory)/$(BUILD_REPOSITORY_TITLE)"
    timeoutInMinutes: 5

  # Make sure we have the right maccore hash checked out before we try to add
  # the provisioning profiles.
  - bash: |
      set -ex
      time make -C $(Build.SourcesDirectory)/$(BUILD_REPOSITORY_TITLE)/ reset
    name: resetDependencies
    displayName: 'Reset dependencies'
    timeoutInMinutes: 10
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken) # needed to checkout AzDo repo dependencies

  # funny enough we need these profiles to build the mac tests
  - template: ../common/install-qa-provisioning-profiles.yml
    parameters:
      env:
        AUTH_TOKEN_GITHUB_COM: ${{ parameters.gitHubToken }}
        AUTH_TOKEN_LA_DEV_APPLE_P12: ${{ parameters.xqaCertPass }}
        AUTH_TOKEN_LA_DISTR_APPLE_P12: ${{ parameters.xqaCertPass }}
        AUTH_TOKEN_LA_MAC_INSTALLER_DISTR_P12: ${{ parameters.xqaCertPass }}
        AUTH_TOKEN_VSENG_XAMARIN_MAC_DEVICES_P12: ${{ parameters.xqaCertPass }}
        AUTH_TOKEN_VSENG_XAMARIN_MAC_DEVICES_2_P12: ${{ parameters.xqaCertPass }}

  - bash: |
       set -x
       set -e
       rm -rf ~/Library/Developer/Xcode/DerivedData/*
       rm -rf ~/Library/Caches/com.apple.dt.Xcode
    displayName: 'Clear Xcode cache'

  # Actual build of the project
  - bash: $(System.DefaultWorkingDirectory)/$(BUILD_REPOSITORY_TITLE)/tools/devops/automation/scripts/bash/build-macios.sh
    name: build
    workingDirectory: "$(Build.SourcesDirectory)/$(BUILD_REPOSITORY_TITLE)"
    displayName: 'Build'
    timeoutInMinutes: 180
    env:
      MAKE_PARALLELISM: ${{ parameters.makeParallelism }}

  - ${{ each step in parameters.buildSteps }}:
      - ${{ each pair in step }}:
          ${{ pair.key }}: ${{ pair.value }}

  # clean the bot after we use it
  - template: ../common/teardown.yml
    parameters:
      keyringPass: ${{ parameters.keyringPass }}
      use1ES: ${{ parameters.use1ES }}

  # report the result of the build.
  - pwsh: |
      Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY\$Env:BUILD_REPOSITORY_TITLE\tools\devops\automation\scripts\MaciosCI.psd1
      $githubComments = New-GitHubCommentsObjectFromUrl -Url "$(Build.Repository.Uri)" -Token $(GitHub.Token) -Hash $Env:COMMENT_HASH
      $commentMessage = [System.Text.StringBuilder]::new()
      if (("$Env:AGENT_JOBSTATUS" -eq "Succeeded") -or ("$Env:AGENT_JOBSTATUS" -eq "SucceededWithIssues")) {
        $commentTitle = "Build passed ($(System.JobDisplayName))"
        $commentIcon = ":white_check_mark:"
        $commentMessage.AppendLine("")
      } else {
        $commentTitle = "Build failed ($(System.JobDisplayName))"
        $commentIcon = ":fire:"
        $commentMessage.AppendLine("Build failed for the job '$(System.JobDisplayName)' (with job status '$Env:AGENT_JOBSTATUS')")
      }
      $githubComments.NewCommentFromMessage($commentTitle, $commentIcon, $commentMessage.ToString(), "build $(System.JobDisplayName)")
    condition: always()
    displayName: 'Report build result'
    env:
      ${{ if eq(parameters.repositoryAlias, 'self') }}:
        COMMENT_HASH: $(fix_commit.GIT_HASH)
      ${{ else }}:
        COMMENT_HASH: $(Build.SourceVersion)

  # Upload any crash reports that occurred during the build. This is helpful if we want to file issues about dotnet/csc crashing during the build.
  - bash: $(System.DefaultWorkingDirectory)/$(BUILD_REPOSITORY_TITLE)/tools/devops/automation/scripts/bash/collect-and-upload-crash-reports.sh
    displayName: 'Collect and upload crash reports'
    condition: always()  # who knows when crash reports can end up being useful
    continueOnError: true
    env:
      MACIOS_UPLOAD_PREFIX: ${{ parameters.uploadPrefix }}
