parameters:

- name: provisionatorChannel
  type: string
  default: 'latest'

- name: pool
  type: string
  default: automatic
  values:
  - pr
  - ci
  - automatic

- name: runTests
  type: boolean
  default: true

- name: runDeviceTests
  type: boolean
  default: false

- name: runOldMacOSTests
  type: boolean
  default: true

- name: runWindowsIntegration
  type: boolean
  default: true

- name: runSamples
  type: boolean
  default: false

- name: isPR
  type: boolean

- name: repositoryAlias
  type: string
  default: self

- name: commit
  type: string
  default: HEAD

- name: xcodeChannel
  type: string

- name: macOSName
  type: string

# Ideally we should read/get the list of platforms from somewhere else, instead of hardcoding them here.
# Note that this is _all_ the platforms we support (not just the enabled ones).
- name: supportedPlatforms
  type: object
  default: [
    {
      platform: iOS,
      isDotNetPlatform: true,
    },
    {
      platform: macOS,
      isDotNetPlatform: true,
    },
    {
      platform: tvOS,
      isDotNetPlatform: true,
    },
    {
      platform: MacCatalyst,
      isDotNetPlatform: true,
    },
    {
      # when running platform-specific test runs, we also need a special test run that executes tests that only runs when multiple platforms are enabled
      platform: Multiple,
      isDotNetPlatform: true,
    }
  ]

- name: testConfigurations
  type: object
  default: [
    # Disabled by default #
    # {
    #   label: bcl,
    #   splitByPlatforms: false,
    # },
    {
      label: cecil,
      splitByPlatforms: false,
      testPrefix: 'simulator_tests',
    },
    {
      label: dotnettests,
      splitByPlatforms: true,
      needsMultiplePlatforms: true,
      testPrefix: 'simulator_tests',
    },
    {
      label: fsharp,
      splitByPlatforms: false,
      testPrefix: 'simulator_tests',
    },
    {
      label: framework,
      splitByPlatforms: false,
      testPrefix: 'simulator_tests',
    },
    {
      label: generator,
      splitByPlatforms: false,
      testPrefix: 'simulator_tests',
    },
    {
      label: interdependent-binding-projects,
      splitByPlatforms: false,
      testPrefix: 'simulator_tests',
    },
    {
      label: introspection,
      splitByPlatforms: false,
      testPrefix: 'simulator_tests',
    },
    {
      label: linker,
      splitByPlatforms: false,
      testPrefix: 'simulator_tests',
    },
    {
      label: mmp,
      splitByPlatforms: false,
      testPrefix: 'simulator_tests',
    },
    {
      label: monotouch,
      splitByPlatforms: true,
      needsMultiplePlatforms: false,
      testPrefix: 'simulator_tests',
    },
    {
      label: msbuild,
      splitByPlatforms: false,
      testPrefix: 'simulator_tests',
    },
    {
      label: xcframework,
      splitByPlatforms: false,
      testPrefix: 'simulator_tests',
    },
    {
      label: xtro,
      splitByPlatforms: false,
      testPrefix: 'simulator_tests',
    },
  ]

- name: deviceTestsConfigurations
  type: object

- name: macTestsConfigurations
  type: object

- name: stageDisplayNamePrefix
  type: string
  default: ''

- name: dependsOn
  type: string
  default: ''

- name: dependsOnResult
  type: string
  default: ''

stages:

- ${{ if parameters.isPR }}:
  - stage: clean
    displayName: '${{ parameters.stageDisplayNamePrefix }}Clean up'
    dependsOn: []
    jobs:
    - job:
      displayName: 'Clean comments'
      pool:
        vmImage: windows-latest
      steps:
      - template: ./common/clean.yml

- stage: configure_build
  displayName: '${{ parameters.stageDisplayNamePrefix }}Configure'
  dependsOn: ${{ parameters.dependsOn }}
  ${{ if and(ne(parameters.dependsOn, ''), ne(parameters.dependsOnResult, '')) }}:
    condition: eq(dependencies.${{ parameters.dependsOn }}.result, '${{ parameters.dependsOnResult }}')
  jobs:
  
  - ${{ if eq(parameters.pool, 'automatic') }}:
    - job: AgentPoolSelector       # https://docs.microsoft.com/en-us/azure/devops/pipelines/process/phases?view=azure-devops&tabs=yaml
      pool:                        # Consider using an agentless (server) job here, but would need to host selection logic as an Azure function: https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#server
        vmImage: ubuntu-latest
      steps:
      - checkout: none             # https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#checkout

      # Selects appropriate agent pool based on trigger type (PR or CI); manually triggered builds target the PR pool
      - template: azure-devops-pools/agent-pool-selector.yml@yaml-templates
        parameters:
          agentPoolPR: $(PRBuildPool)
          agentPoolPRUrl: $(PRBuildPoolUrl)
          agentPoolCI: $(CIBuildPool)
          agentPoolCIUrl: $(CIBuildPoolUrl)

  - job: configure
    displayName: 'Configure build'
    pool:
      vmImage: windows-latest

    variables:
      isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
      isScheduled: $[eq(variables['Build.Reason'], 'Schedule')]
      BRANCH_NAME: $[ replace(variables['Build.SourceBranch'], 'refs/heads/', '') ]

    steps:
    - template: common/load_configuration.yml
      parameters: 
        repositoryAlias: ${{ parameters.repositoryAlias }}
        commit: ${{ parameters.commit }}
        testConfigurations: ${{ parameters.testConfigurations }}
        supportedPlatforms: ${{ parameters.supportedPlatforms }}
        testsLabels: '--label=skip-all-tests,run-ios-tests,run-ios-simulator-tests,run-tvos-tests,run-watchos-tests,run-mac-tests,run-maccatalyst-tests,run-dotnet-tests,run-system-permission-tests,run-legacy-xamarin-tests'
        statusContext: 'VSTS: simulator tests' 
        uploadArtifacts: true

# always run simulator tests
- template: ./tests/stage.yml
  parameters:
    xcodeChannel: ${{ parameters.xcodeChannel }}
    macOSName: ${{ parameters.macOSName }}
    isPR: ${{ parameters.isPR }}
    repositoryAlias: ${{ parameters.repositoryAlias }}
    commit: ${{ parameters.commit }}
    testConfigurations: ${{ parameters.testConfigurations }}
    supportedPlatforms: ${{ parameters.supportedPlatforms }}
    stageName: 'simulator_tests'
    displayName: '${{ parameters.stageDisplayNamePrefix }}Simulator tests'
    testPool: '' # use the default
    statusContext: 'VSTS: simulator tests'
    makeTarget: 'jenkins'
    vsdropsPrefix: ${{ variables.vsdropsPrefix }}
    keyringPass: $(pass--lab--mac--builder--keychain)
    gitHubToken: $(Github.Token)
    xqaCertPass: $(xqa--certificates--password)
    condition: ${{ parameters.runTests }}
    postPipeline: true

- template: ./tests/publish-results.yml
  parameters:
    displayName: '${{ parameters.stageDisplayNamePrefix }}Publish Test Results'
    stageName: 'publish_test_results'
    statusContext: 'VSTS: test results'
    vsdropsPrefix: ${{ variables.vsdropsPrefix }}
    condition: ${{ parameters.runTests }}
    testConfigurations: ${{ parameters.testConfigurations }}
    supportedPlatforms: ${{ parameters.supportedPlatforms }}
    isPR: ${{ parameters.isPR }}
    repositoryAlias: ${{ parameters.repositoryAlias }}
    commit: ${{ parameters.commit }}
    postPipeline: true

- ${{ if eq(parameters.runOldMacOSTests, true) }}:
  - ${{ each config in parameters.macTestsConfigurations }}:
    - template: ./mac/stage.yml
      parameters:
        isPR: ${{ parameters.isPR }}
        repositoryAlias: ${{ parameters.repositoryAlias }}
        commit: ${{ parameters.commit }}
        stageName: ${{ config.stageName }}
        displayName: ' ${{ parameters.stageDisplayNamePrefix }}${{ config.displayName }}'
        macPool: ${{ config.macPool }}
        useImage: ${{ config.useImage }}
        statusContext: ${{ config.statusContext }}
        keyringPass: $(pass--lab--mac--builder--keychain)
        demands: ${{ config.demands }}
        postPipeline: true

- ${{ if eq(parameters.runWindowsIntegration, true) }}:
  - template: ./windows/stage.yml
    parameters:
      isPR: ${{ parameters.isPR }}
      repositoryAlias: ${{ parameters.repositoryAlias }}
      commit: ${{ parameters.commit }}
      stageName: windows_integration
      displayName: '${{ parameters.stageDisplayNamePrefix }}Windows Integration Tests'
      pool: 'VSEng-Xamarin-Mac-Devices' # currently ignored until the VS team provides a real one
      statusContext: 'Windows Integration Tests'
      gitHubToken: $(Github.Token)
      xqaCertPass: $(xqa--certificates--password)
      postPipeline: true

- ${{ if eq(parameters.runSamples, true) }}:
  # TODO: Not the real step
  - stage: sample_testing
    displayName: '${{ stageDisplayNamePrefix }}Sample testing'
    dependsOn:
    - build_packages
    condition: and(succeeded(), contains (stageDependencies.build_packages.build.outputs['configuration.RunSampleTests'], 'True'))
    jobs:
    - job: sample_testing
      pool:
        vmImage: ubuntu-latest
      steps:
      # TODO: do parse labels
      - bash: |
          echo "Samples!"
        displayName: 'Sample testing'
