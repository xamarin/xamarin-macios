# yamllint disable rule:line-length
parameters:
  - name: provisionatorChannel
    type: string
    default: 'latest'

  - name: pool
    type: string

  - name: runGovernanceTests
    type: boolean
    default: true

  - name: enableLegacySigning
    type: boolean
    default: true

  - name: forceInsertion
    type: boolean
    default: false

  - name: pushNugets
    type: boolean
    default: true # default to true until otherwhise

  - name: pushNugetsToMaestro
    type: boolean
    default: true

  - name: isPR
    type: boolean

  - name: repositoryAlias
    type: string
    default: self

  - name: commit
    type: string
    default: HEAD

  - name: xcodeChannel
    type: string

  - name: macOSName
    type: string

  # Ideally we should read/get the list of platforms from somewhere else, instead of hardcoding them here.
  # Note that this is _all_ the platforms we support (not just the enabled ones).
  - name: supportedPlatforms
    type: object
    default: [
      {
        platform: iOS,
        isDotNetPlatform: true,
      },
      {
        platform: macOS,
        isDotNetPlatform: true,
      },
      {
        platform: tvOS,
        isDotNetPlatform: true,
      },
      {
        platform: MacCatalyst,
        isDotNetPlatform: true,
      },
      {
        # when running platform-specific test runs, we also need a special test run that executes tests that only runs when multiple platforms are enabled
        platform: Multiple,
        isDotNetPlatform: true,
      }
    ]

  - name: testConfigurations
    type: object
    default: [
      # Disabled by default #
      # {
      #   label: bcl,
      #   splitByPlatforms: false,
      # },
      {
        label: cecil,
        splitByPlatforms: false,
        testPrefix: 'simulator_tests',
      },
      {
        label: dotnettests,
        splitByPlatforms: true,
        needsMultiplePlatforms: true,
        testPrefix: 'simulator_tests',
      },
      {
        label: fsharp,
        splitByPlatforms: false,
        testPrefix: 'simulator_tests',
      },
      {
        label: framework,
        splitByPlatforms: false,
        testPrefix: 'simulator_tests',
      },
      {
        label: generator,
        splitByPlatforms: false,
        testPrefix: 'simulator_tests',
      },
      {
        label: interdependent-binding-projects,
        splitByPlatforms: false,
        testPrefix: 'simulator_tests',
      },
      {
        label: introspection,
        splitByPlatforms: false,
        testPrefix: 'simulator_tests',
      },
      {
        label: linker,
        splitByPlatforms: false,
        testPrefix: 'simulator_tests',
      },
      {
        label: monotouch,
        splitByPlatforms: true,
        needsMultiplePlatforms: false,
        testPrefix: 'simulator_tests',
      },
      {
        label: msbuild,
        splitByPlatforms: false,
        testPrefix: 'simulator_tests',
      },
      {
        label: xcframework,
        splitByPlatforms: false,
        testPrefix: 'simulator_tests',
      },
      {
        label: xtro,
        splitByPlatforms: false,
        testPrefix: 'simulator_tests',
      },
    ]

  - name: deviceTestsConfigurations
    type: object

  - name: macTestsConfigurations
    type: object

  - name: stageDisplayNamePrefix
    type: string
    default: ''

  - name: dependsOn
    type: string
    default: ''

  - name: dependsOnResult
    type: string
    default: ''

stages:

  - stage: configure_build
    displayName: '${{ parameters.stageDisplayNamePrefix }}Configure'
    dependsOn: ${{ parameters.dependsOn }}
    ${{ if and(ne(parameters.dependsOn, ''), ne(parameters.dependsOnResult, '')) }}:
      condition: eq(dependencies.${{ parameters.dependsOn }}.result, '${{ parameters.dependsOnResult }}')
    jobs:

      - job: configure
        displayName: 'Configure build'
        pool:
          name: AzurePipelines-EO
          os: linux
          image: 1ESPT-Ubuntu22.04

        variables:
          isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
          isScheduled: $[eq(variables['Build.Reason'], 'Schedule')]
          BRANCH_NAME: $[ replace(variables['Build.SourceBranch'], 'refs/heads/', '') ]

        steps:
          - template: common/configure.yml
            parameters:
              repositoryAlias: ${{ parameters.repositoryAlias }}
              commit: ${{ parameters.commit }}
              testConfigurations: ${{ parameters.testConfigurations }}
              supportedPlatforms: ${{ parameters.supportedPlatforms }}
              testsLabels: '--label=skip-all-tests,run-ios-tests,run-ios-simulator-tests,run-tvos-tests,run-mac-tests,run-maccatalyst-tests,run-system-permission-tests'
              statusContext: 'VSTS: simulator tests'
              uploadArtifacts: true
              use1ES: true

  - stage: build_packages
    displayName: '${{ parameters.stageDisplayNamePrefix }}Build'
    dependsOn: [configure_build]
    jobs:
      - template: ./build/build-stage.yml
        parameters:
          xcodeChannel: ${{ parameters.xcodeChannel }}
          macOSName: ${{ parameters.macOSName }}
          isPR: ${{ parameters.isPR }}
          repositoryAlias: ${{ parameters.repositoryAlias }}
          commit: ${{ parameters.commit }}
          vsdropsPrefix: ${{ variables.vsdropsPrefix }}
          keyringPass: $(pass--lab--mac--builder--keychain)
          gitHubToken: $(Github.Token)
          xqaCertPass: $(xqa--certificates--password)
          pool: ${{ parameters.pool }}

  - stage: build_macos_tests
    displayName: '${{ parameters.stageDisplayNamePrefix }}Build macOS tests'
    dependsOn: [configure_build]
    jobs:
      - template: ./build/build-mac-tests-stage.yml
        parameters:
          xcodeChannel: ${{ parameters.xcodeChannel }}
          macOSName: ${{ parameters.macOSName }}
          isPR: ${{ parameters.isPR }}
          repositoryAlias: ${{ parameters.repositoryAlias }}
          commit: ${{ parameters.commit }}
          vsdropsPrefix: ${{ variables.vsdropsPrefix }}
          keyringPass: $(pass--lab--mac--builder--keychain)
          gitHubToken: $(Github.Token)
          xqaCertPass: $(xqa--certificates--password)
          pool: ${{ parameters.pool }}

  # .NET Release Prep and VS Insertion Stages, only execute them when the build comes from an official branch and is not a schedule build from OneLoc
  # setting the stage at this level makes the graph of the UI look better, else the lines overlap and is not clear.
  - ? ${{ if
        and(
          ne(variables['Build.Reason'], 'Schedule'),
          or(
            eq(variables['Build.SourceBranch'], 'refs/heads/main'),
            startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'),
            startsWith(variables['Build.SourceBranch'], 'refs/heads/release-test/'),
            eq(variables['Build.SourceBranch'], 'refs/heads/net7.0'),
            eq(variables['Build.SourceBranch'], 'refs/heads/net8.0'),
            eq(variables['Build.SourceBranch'], 'refs/heads/net9.0'),
            eq(variables['Build.SourceBranch'], 'refs/heads/net10.0'),
            eq(variables['Build.SourceBranch'], 'refs/heads/xcode16'),
            eq(parameters.forceInsertion, true)
          )
        )
      }}
    : - template: ./release/vs-insertion-prep.yml
        parameters:
          buildStage: build_packages
          dependsOn: [build_packages, configure_build]
          stageDisplayNamePrefix: ${{ parameters.stageDisplayNamePrefix }}
          isPR: ${{ parameters.isPR }}
          repositoryAlias: ${{ parameters.repositoryAlias }}
          commit: ${{ parameters.commit }}
          pushNugets: ${{ parameters.pushNugets }}
          pushNugetsToMaestro: ${{ parameters.pushNugetsToMaestro }}
