parameters:

- name: isPR
  type: boolean

- name: repositoryAlias
  type: string
  default: self

- name: commit
  type: string
  default: HEAD

- name: uploadPrefix
  type: string
  default: '$(MaciosUploadPrefix)'

- name: use1ES
  type: boolean
  default: true

steps:

- template: ../common/checkout.yml
  parameters:
    isPR: ${{ parameters.isPR }}
    repositoryAlias: ${{ parameters.repositoryAlias }}
    commit: ${{ parameters.commit }}

- ${{ if or(contains(variables['Build.Reason'], 'ResourceTrigger'), contains(variables['Build.Reason'], 'BuildCompletion')) }}:
  - download: macios
    displayName: Download artifacts
    artifact: not-signed-package

  # When we download an artifact from a resource pipeline, the download task places the artifact under $(Pipeline.Workspace)/$(pipeline-ref)/artifact
  # in our case, it will be "$(Pipeline.Workspace)/macios/not-signed-package". Becuase this stage was originally part of the build, all the scripts
  # assume that the location of the nugets is "$(Build.SourcesDirectory)/not-signed-package" already unzipped in a flat dir. This pwsh script does
  # the move and flattering of the files.
  - pwsh: |
      $source = "$(Pipeline.Workspace)/macios/not-signed-package"
      $destination = "$(Build.SourcesDirectory)/not-signed-package"
      New-Item -ItemType Directory -Force -Path $destination 
      Write-Host "Moving content from $source to $destination"
      # move all the files from the source to the destination
      Get-ChildItem -Path $source -Recurse -File | Move-Item -Destination $destination 
    displayName: Move artifacts to the expected location

- ${{ else }}:

  - task: DownloadPipelineArtifact@2
    displayName: Download artifacts
    inputs:
      artifactName: not-signed-package
      allowFailedBuilds: true
      path: $(Build.SourcesDirectory)/not-signed-package

- pwsh: >-
    ./prepare_workload_apiscan.ps1
    -SourcesDirectory "$(Build.SourcesDirectory)"
    -Platform $Env:PLATFORM
  displayName: "Expand nugets"
  workingDirectory: $(Build.SourcesDirectory)/$(BUILD_REPOSITORY_TITLE)/tools/devops/automation/scripts
  env:
    PLATFORM: $(PLATFORM)

- task: APIScan@2
  displayName: Run APIScan
  inputs:
    softwareFolder: $(Build.SourcesDirectory)/APIScan
    softwareName: "Microsoft.$(PLATFORM)"
    softwareVersionNum: $(VERSION)
    isLargeApp: true  # we did get a Max Unknown error (work item 1973775), it means we need to reduce the call graph
    toolVersion: 'Latest'
    verbosityLevel: standard
    preserveLogsFolder: true
  env:
    AzureServicesAuthConnectionString: RunAs=App;AppId=$(CLIENT_ID)
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)

- task: PublishSecurityAnalysisLogs@3
  displayName: Publish Security Analysis Logs
  condition: succeededOrFailed()
  inputs:
    ArtifactName: 'CodeAnalysisLogs - APIScan $(PLATFORM) $(VERSION)'
    ArtifactType: 'Container'
    AllTools: true
    ToolLogsNotFoundAction: 'Standard'

- task: SdtReport@2
  displayName: Create Security Analysis Report
  inputs:
    GdnExportAllTools: false
    GdnExportGdnToolApiScan: true
    GdnExportGdnToolApiScanSeverity: 'error'

- task: TSAUpload@2
  inputs:
    GdnPublishTsaOnboard: true
    GdnPublishTsaConfigFile: '$(System.DefaultWorkingDirectory)\\$(Build.RepositoryTitle)\\tools\\devops\\governance\\tsa_config.gdntsa'
    GdnPublishTsaExportedResultsPublishable: true
  displayName: Create bugs for compliance tools results
  condition: succeededOrFailed()
  env:
    WorkingDirectory: '$(Build.SourcesDirectory)/$(Build.RepositoryTitle)'

- task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@2
  displayName: Break on compliance issues
  condition: false # do not break for APIScan until we have fixed the issues
  inputs:
    GdnBreakAllTools: true
    GdnBreakSuppressionFiles: $(Build.SourcesDirectory)\$(Build.RepositoryTitle)\tools\devops\governance\falsepositives.gdnsuppress
    GdnBreakSuppressionSets: falsepositives
    GdnBreakOutputSuppressionFile: $(Build.ArtifactStagingDirectory)\GuardianSuppressions\falsepositives.gdnsuppress
    GdnBreakOutputSuppressionSet: falsepositives

- ${{ if eq(parameters.use1ES, true) }}:
  - task: 1ES.PublishPipelineArtifact@1
    displayName: Publish Artifact for Guardian Supressions
    inputs:
      path: $(Build.ArtifactStagingDirectory)\GuardianSuppressions
      artifact: Guardian Suppressions APIScan $(PLATFORM) $(VERSION)
    condition: failed()
- ${{ else }}:
  - task: PublishPipelineArtifact@1
    displayName: Publish Artifact for Guardian Supressions
    inputs:
      targetPath: $(Build.ArtifactStagingDirectory)\GuardianSuppressions
      artifactName: Guardian Suppressions APIScan $(PLATFORM) $(VERSION)
    condition: failed()
