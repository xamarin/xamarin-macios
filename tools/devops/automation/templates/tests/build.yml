# Xamarin
#
# Template that contains the different steps required to run device
# tests. The template takes a number of parameters so that it can
# be configured for the different type of devices.
#
parameters:

- name: statusContext
  type: string
  default: 'iOS Device Tests' # default context, since we started dealing with iOS devices.

- name: testsLabels
  type: string
  default: '--label=run-ios-tests,run-non-monotouch-tests,run-monotouch-tests,run-mscorlib-tests' # default context, since we started dealing with iOS devices.

- name: label
  type: string

- name: labelWithPlatform
  type: string

- name: disableProvisionatorCache
  type: boolean
  default: false

- name: clearProvisionatorCache
  type: boolean
  default: false

- name: vsdropsPrefix
  type: string

# can depend on the pool, which is annoying, but we should keep it in mind
- name: keyringPass
  type: string

- name: testPrefix
  type: string
  default: 'ios' # default context, since we started dealing with iOS devices.

- name: gitHubToken
  type: string

- name: xqaCertPass
  type: string

- name: makeTarget
  type: string
  default: 'vsts-device-tests' # target to be used to run the tests

- name: isPR
  type: boolean

- name: repositoryAlias
  type: string
  default: self

- name: commit
  type: string
  default: HEAD

- name: uploadPrefix
  type: string
  default: '$(MaciosUploadPrefix)'

- name: testPlatform
  type: string
  default: ''

- name: conditionVariable
  type: string
  default: ''

- name: retryCount
  type: number
  default: 3

- name: XcodeChannel
  type: string

steps:

- template: ../common/checkout.yml
  parameters:
    isPR: ${{ parameters.isPR }}
    repositoryAlias: ${{ parameters.repositoryAlias }}
    commit: ${{ parameters.commit }}

- template: ../common/setup.yml
  parameters:
    keyringPass: ${{ parameters.keyringPass }}

# Use a cmdlet to check if the space available in the devices root system is larger than 50 gb. If there is not
# enough space available it:
# 1. Set a comment stating the same as what was sent to the status.
# 2. Cancel the pipeline and do not execute any of the following steps.
- pwsh: | 
    Import-Module ./MaciosCI.psd1
    Assert-HDFreeSpace -Size 20
  env:
    CONTEXT: ${{ parameters.statusContext }}
    GITHUB_TOKEN: $(GitHub.Token)
    ACCESSTOKEN: $(System.AccessToken)
  displayName: 'Check HD Free Space'
  timeoutInMinutes: 5
  workingDirectory: $(System.DefaultWorkingDirectory)/$(BUILD_REPOSITORY_TITLE)/tools/devops/automation/scripts/

# if we got to this point, it means that we do have at least 50 Gb to run the test, should
# be more than enough, else the above script would have stopped the pipeline
- bash: |
    set -x
    set -e
    cd "$BUILD_REPOSITORY_TITLE"
    TEST_PLATFORM=$(echo "${{ parameters.testPlatform }}" | tr '[:upper:]' '[:lower:]')
    ARGS=(--enable-xamarin)
    if test -n "$TEST_PLATFORM"; then
      ARGS+=("--disable-all-platforms")
      ARGS+=("--enable-$TEST_PLATFORM")
    fi
    ./configure "${ARGS[@]}"
  displayName: 'Enable Xamarin and configure platforms'
  timeoutInMinutes: 1

# Add the required provisioning profiles to be able to execute the tests.
- bash: |
    set -x
    set -e
    rm -f ~/Library/Caches/com.xamarin.provisionator/Provisions/*p12
    rm -f ~/Library/Caches/com.xamarin.provisionator/Provisions/*mobileprovision
  displayName: 'Add provisioning profiles'

- template: ../common/install-qa-provisioning-profiles.yml
  parameters:
    env:
      AUTH_TOKEN_GITHUB_COM: ${{ parameters.gitHubToken }}
      AUTH_TOKEN_LA_DEV_APPLE_P12: ${{ parameters.xqaCertPass }}
      AUTH_TOKEN_LA_DISTR_APPLE_P12: ${{ parameters.xqaCertPass }}
      AUTH_TOKEN_LA_MAC_INSTALLER_DISTR_P12: ${{ parameters.xqaCertPass }}
      AUTH_TOKEN_VSENG_XAMARIN_MAC_DEVICES_P12: ${{ parameters.xqaCertPass }}
      AUTH_TOKEN_VSENG_XAMARIN_MAC_DEVICES_2_P12: ${{ parameters.xqaCertPass }}

# this could be a template, which would make everything a lot simpler BUT alas we found a bug in Azure Devops (bugs++). 
# if we use a template here azure devops will throw an exception due to a foreign key constraint error in their PK_Task_tbl_PlanContext.
# The simplest way to workaround their bad code is to remove the template and that way there wont be a task issue. I suspect that
# the problem resides in the fact that this is a template within a template within a matrix. 
- bash: |
    sudo rm -Rf $(Build.SourcesDirectory)/artifacts
  displayName: "Remove artifacts"
  condition: always()

# use a diff step depending if we have been trigger by a pipeline of by a PR/Commit
- ${{ if or(contains(variables['Build.Reason'], 'ResourceTrigger'), contains(variables['Build.Reason'], 'BuildCompletion'), contains(variables['Build.DefinitionName'], 'xamarin-macios-ci-tests'), contains(variables['Build.DefinitionName'], 'xamarin-macios-pr-tests')) }}:
  - bash: |
      ls -la "$PIPELINE_WORKSPACE/macios" || true
      rm -Rf "$PIPELINE_WORKSPACE/macios"
    displayName: "Remove previously downloaded artifacts"
    condition: always()

  - download: macios
    displayName: Download WorkloadRollback.json
    artifact: WorkloadRollback

  - download: macios
    displayName: Download packages
    artifact: not-signed-package

  - download: macios
    displayName: Download test libraries
    artifact: package-test-libraries

  - pwsh: |
      Get-ChildItem -Path "$(Pipeline.Workspace)/macios" -Recurse -Force | Format-Table -AutoSize | Out-String -Width 1000
    displayName: 'List downloaded macios artifacts'
    timeoutInMinutes: 5

  # the default location when downloading is $(Pipeline.Workspace)/<pipeline resource identifier>/<artifact name>
  - bash: |
      source="$PIPELINE_WORKSPACE/macios"
      destination="$BUILD_SOURCESDIRECTORY/artifacts"
      # move all the files from the source to the destination
      mv -fv "$source" "$destination"
    displayName: Move artifacts to the expected location

- ${{ else }}:
  - task: DownloadPipelineArtifact@2
    displayName: Download WorkloadRollback.json
    inputs:
      allowFailedBuilds: true
      patterns: '**/WorkloadRollback.json'
      path: $(Build.SourcesDirectory)/artifacts

  - task: DownloadPipelineArtifact@2
    displayName: Download packages
    inputs:
      allowFailedBuilds: true
      artifactName: not-signed-package
      path: $(Build.SourcesDirectory)/artifacts/not-signed-package

  - task: DownloadPipelineArtifact@2
    displayName: Download test libraries
    inputs:
      allowFailedBuilds: true
      artifactName: package-test-libraries
      path: $(Build.SourcesDirectory)/artifacts/package-test-libraries

# print the downloads to make our life easier on debug
- pwsh: |
    Get-ChildItem -Path $(Build.SourcesDirectory)/artifacts -Recurse -Force | Format-Table -AutoSize | Out-String -Width 1000
  displayName: 'List downloaded artifacts'
  timeoutInMinutes: 5

- bash: |
    make -C $(System.DefaultWorkingDirectory)/$(BUILD_REPOSITORY_TITLE)/tools/devops/ provisioning
  displayName: 'Generate Provisionator csx file'

# Executed ONLY if we want to clear the provisionator cache.
- bash: rm -rf "$TOOLS_DIR/provisionator"
  env:
    TOOLS_DIR: $(Agent.ToolsDirectory)
  displayName: 'Remove Provisionator Tool Cache'
  condition: ${{ parameters.clearProvisionatorCache }}

# Use the provisionator to install the test dependencies. Those have been generated in the 'Generate Provisionator csx file' step.
- task: xamops.azdevex.provisionator-task.provisionator@2
  displayName: 'Provision dependencies'
  inputs:
    provisioning_script: $(System.DefaultWorkingDirectory)/$(BUILD_REPOSITORY_TITLE)/tools/devops/build-provisioning.csx
    provisioning_extra_args: '-vvvv'
    github_token: ${{ parameters.gitHubToken }}
  timeoutInMinutes: 250

- bash: |
    set -x
    set -e
    ARGS=()
    ARGS+=(--provision-simulators)
    if [[ "$XCODE_CHANNEL" == "Beta" ]]; then
      ARGS+=(--provision-old-simulators)
    fi
    ARGS+=(--ignore-shellcheck)
    ARGS+=(--ignore-yamllint)
    $(Build.SourcesDirectory)/$(BUILD_REPOSITORY_TITLE)/system-dependencies.sh "${ARGS[@]}"
  displayName: 'Provision simulators'
  timeoutInMinutes: 250
  env:
    XCODE_CHANNEL: ${{ parameters.XcodeChannel }}

# clean sims incase we were left in a strange state
- bash: |
    sudo xcrun simctl shutdown all
    sudo xcrun simctl erase all
  displayName: 'Clean simulators'
  timeoutInMinutes: 20

- template: ./run-tests.yml
  parameters:
    isPR: ${{ parameters.isPR }}
    label: ${{ parameters.label }}
    labelWithPlatform: ${{ parameters.labelWithPlatform }}
    statusContext: ${{ parameters.statusContext }}
    testsLabels: ${{ parameters.testsLabels }}
    vsdropsPrefix: ${{ parameters.vsdropsPrefix }}
    testPrefix: ${{ parameters.testPrefix }}
    makeTarget: ${{ parameters.makeTarget }}

# clean the bot after we use it
- template: ../common/teardown.yml
  parameters:
    keyringPass: ${{ parameters.keyringPass }}
