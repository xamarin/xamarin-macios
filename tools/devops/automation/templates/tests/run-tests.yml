parameters:
- name: statusContext
  type: string
  default: 'iOS Device Tests' # default context, since we started dealing with iOS devices.

- name: testsLabels
  type: string
  default: '--label=run-ios-tests,run-non-monotouch-tests,run-monotouch-tests,run-mscorlib-tests' # default context, since we started dealing with iOS devices.

- name: label
  type: string

- name: isPR
  type: boolean

- name: labelWithPlatform
  type: string

- name: testPlatform
  type: string
  default: ''

- name: vsdropsPrefix
  type: string

- name: testPrefix
  type: string
  default: 'ios' # default context, since we started dealing with iOS devices.

- name: makeTarget
  type: string
  default: 'vsts-device-tests' # target to be used to run the tests

- name: uploadPrefix
  type: string
  default: '$(MaciosUploadPrefix)'

- name: retryCount
  type: number
  default: 3

steps:
- bash: |
    set -ex
    brew update
    if [[ "1" == "$(sysctl -n sysctl.proc_translated)" ]]; then
      arch -arm64 brew install powershell
    else
      brew install powershell
    fi
  displayName: Install powershell

- pwsh: $(Build.SourcesDirectory)/xamarin-macios/tools/devops/automation/scripts/initialize-test-output-variables.ps1
  displayName: Set output variables
  env:
    TESTS_LABEL: ${{ parameters.label }}
    TESTS_PLATFORM: ${{ parameters.testPlatform }}
    LABEL_WITH_PLATFORM: ${{ parameters.labelWithPlatform }}

- pwsh: |
    Write-Host "##vso[task.setvariable variable=TESTS_USE_SYSTEM]true"
  displayName: Set SDK destination dirs 


# remove any old processes that might have been left behind.
- pwsh: |
    Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY/$Env:BUILD_REPOSITORY_TITLE/tools/devops/automation/scripts/MaciosCI.psd1
    Clear-XamarinProcesses
  displayName: 'Process cleanup'

# Increase mlaunch verbosity. Will step on the old setting present.
- pwsh: |
    Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY/$Env:BUILD_REPOSITORY_TITLE/tools/devops/automation/scripts/MaciosCI.psd1
    Set-MLaunchVerbosity -Verbosity 10
  displayName: 'Make mlaunch verbose'

# Re-start the daemon used to find the devices in the bot.
- pwsh: |
    Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY/$Env:BUILD_REPOSITORY_TITLE/tools/devops/automation/scripts/MaciosCI.psd1
    Optimize-DeviceDiscovery
  displayName: 'Fix device discovery (reset launchctl)'

- bash: |
    make -C src build/generator-frameworks.g.cs
    make -C src build/ios/Constants.cs
    make -C msbuild Versions.g.cs
  workingDirectory: $(System.DefaultWorkingDirectory)/$(BUILD_REPOSITORY_TITLE)
  displayName: Generate constants files 
  timeoutInMinutes: 15

- pwsh: >-
    ./set_xtro_workloads.ps1
    -WorkloadPath "$(Build.SourcesDirectory)/artifacts/${{ parameters.uploadPrefix }}WorkloadRollback/WorkloadRollback.json"
  workingDirectory: $(System.DefaultWorkingDirectory)/$(BUILD_REPOSITORY_TITLE)/tools/devops/automation/scripts
  displayName: 'Set workload versions for xtro'

- bash: $(System.DefaultWorkingDirectory)/$(BUILD_REPOSITORY_TITLE)/tools/devops/automation/scripts/bash/install-workloads.sh
  workingDirectory: $(System.DefaultWorkingDirectory)/$(BUILD_REPOSITORY_TITLE)
  displayName: 'Install dotnet workloads'
  timeoutInMinutes: 45
  env:
    MACIOS_UPLOAD_PREFIX: ${{ parameters.uploadPrefix }}

# expand all the prebuilt test dependencies
- bash: |
    ls -Rla@ $(Build.SourcesDirectory)/artifacts
    xattr -s -c -r $(Build.SourcesDirectory)/artifacts/${{ parameters.uploadPrefix }}package-test-libraries/package-test-libraries.zip
    unzip -o $(Build.SourcesDirectory)/artifacts/${{ parameters.uploadPrefix }}package-test-libraries/package-test-libraries.zip -d .
    ls -Rla@ .
    xattr -s -c -r .
  workingDirectory: $(System.DefaultWorkingDirectory)/$(BUILD_REPOSITORY_TITLE)
  displayName: Expand test libraries.
  timeoutInMinutes: 10

# Run tests.
- bash: |
    set -x
    set -e

    # uri used to create the vsdrops index using full uri
    export VSDROPS_URI="$VSDROPSPREFIX/$BUILD_BUILDNUMBER/$BUILD_BUILDID/$PARAMETERS_TESTPREFIX-$SYSTEM_JOBATTEMPT;/tests/"

    # show environment
    env -0 | sort -z | tr '\0' '\n' || true

    make -C tests ${{ parameters.makeTarget }}

    # We reached the end! This means we succeeded!
    set +x
    echo "##vso[task.setvariable variable=TESTS_JOBSTATUS;isOutput=true]Succeeded"
    set -x
  env:
    TEST_PREFIX: ${{ upper(parameters.testPrefix) }}
    TESTS_EXTRA_ARGUMENTS: ${{ parameters.testsLabels }}
    USE_TCP_TUNNEL: 'true'
    PARAMETERS_TESTPREFIX: '${{ parameters.testPrefix }}'
  workingDirectory: $(System.DefaultWorkingDirectory)/$(BUILD_REPOSITORY_TITLE)
  displayName: 'Run tests'
  name: runTests # not to be confused with the displayName, this is used to later use the name of the step to access the output variables from an other job
  timeoutInMinutes: 840
  ${{ if not(parameters.isPR) }}:
    retryCountOnTaskFailure: ${{ parameters.retryCount }}

# Collect simulator diagnostic logs
- bash: |
    set -x
    set -e

    rm -Rf $(System.DefaultWorkingDirectory)/diagnostic-sim-output/output
    mkdir -p $(System.DefaultWorkingDirectory)/diagnostic-sim-output/output
    if ! printf "\n" | xcrun simctl diagnose -b -X --output=$(System.DefaultWorkingDirectory)/diagnostic-sim-output/output; then
      echo "simctl diagnose failed with exit code $?"
    fi

  displayName: 'Collect diagnostic info from simulators'
  condition: eq(variables['system.debug'], true)
  continueOnError: true
  name: collectSimulatorInfo
  timeoutInMinutes: 30

# Publish the simulator diagnostic logs
- task: PublishPipelineArtifact@1
  displayName: 'Publish Artifact: Simulator diagnostic info'
  inputs:
    targetPath: $(System.DefaultWorkingDirectory)/diagnostic-sim-output
    artifactName: '${{ parameters.uploadPrefix }}diagnostic-simulator-info-$(Build.BuildId)-$(System.StageAttempt)-$(System.JobAttempt)-${{ parameters.labelWithPlatform }}'
  condition: and(eq(variables['system.debug'], true), succeededOrFailed())
  continueOnError: true

# Upload TestSummary as an artifact.
- task: PublishPipelineArtifact@1
  displayName: 'Publish Artifact: TestSummary'
  inputs:
    targetPath: '$(BUILD_REPOSITORY_TITLE)/tests/TestSummary.md'
    artifactName: '${{ parameters.uploadPrefix }}TestSummary-${{ parameters.testPrefix }}-$(System.JobAttempt)'
  continueOnError: true
  condition: succeededOrFailed()

- pwsh: |
    $summaryName = "TestSummary-${{ parameters.testPrefix }}.md"
    $summaryPath = "$Env:SYSTEM_DEFAULTWORKINGDIRECTORY/$(BUILD_REPOSITORY_TITLE)/tests/TestSummary.md"
    if (Test-Path -Path $summaryPath -PathType Leaf) {
      Write-Host "##vso[task.addattachment type=Distributedtask.Core.Summary;name=$summaryName;]$summaryPath"
    }
  displayName: Set TestSummary
  continueOnError: true
  condition: succeededOrFailed()

- task: artifactDropTask@1
  displayName: 'Publish to Artifact Services Drop'
  inputs:
    dropServiceURI: 'https://devdiv.artifacts.visualstudio.com/DefaultCollection'
    dropMetadataContainerName: '${{ parameters.uploadPrefix }}DropMetadata-${{ parameters.testPrefix }}${{ parameters.labelWithPlatform }}-$(System.JobAttempt)'
    buildNumber: '$(BUILD_REPOSITORY_TITLE)/device-tests/$(Build.BuildNumber)/$(Build.BuildId)/${{ parameters.testPrefix }}-$(System.JobAttempt)'
    sourcePath: '$(BUILD_REPOSITORY_TITLE)/jenkins-results'
    detailedLog: true
    usePat: true
  continueOnError: true
  condition: succeededOrFailed()

- bash: |
    set -ex
    find . -name 'vsts-*.xml' || true
    find . -name 'vsts-*.xml' -ls -exec cat {} \; || true
    VSTS_XML_FILES=$(find . -name 'vsts-*.xml' | wc -l | sed 's/ //g')
    set +x
    echo "##vso[task.setvariable variable=VSTS_XML_FILES]$VSTS_XML_FILES"
    set -x
  name: CountNUnitTestResults
  continueOnError: true
  condition: succeededOrFailed()
  displayName: 'Count NUnit test results'

# Upload test results to vsts.
- task: PublishTestResults@2
  displayName: 'Publish NUnit Device Test Results'
  inputs:
    testResultsFormat: NUnit
    testResultsFiles: '**/vsts-*.xml'
  continueOnError: true
  condition: and(ne(variables['VSTS_XML_FILES'], 0), succeededOrFailed())

# Archive files for the Html Report so that the report can be easily uploaded as artifacts of the build.
- task: ArchiveFiles@1
  displayName: 'Archive HtmlReport'
  inputs:
    rootFolder: '$(BUILD_REPOSITORY_TITLE)/jenkins-results'
    includeRootFolder: false
    archiveFile: '$(Build.ArtifactStagingDirectory)/HtmlReport.zip'
  continueOnError: true
  condition: succeededOrFailed()

# Create HtmlReport artifact. This serves two purposes:
# 1. It is the way we are going to share the HtmlReport with the publish_html job that is executed on a Windows machine.
# 2. Users can download this if they want.
- task: PublishPipelineArtifact@1
  displayName: 'Publish Artifact: HtmlReport'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/HtmlReport.zip'
    artifactName: '${{ parameters.uploadPrefix }}HtmlReport-${{ parameters.testPrefix }}-$(System.JobAttempt)'
  continueOnError: true
  condition: succeededOrFailed()

# Upload all the binlogs
# Copy all the binlogs to a separate directory, keeping directory structure.
- script: |
    set -x
    mkdir -p $(Build.ArtifactStagingDirectory)/all-binlogs
    rsync -av --prune-empty-dirs --include '*/' --include '*.binlog' --exclude '*' $(Build.SourcesDirectory)/$(BUILD_REPOSITORY_TITLE) $(Build.ArtifactStagingDirectory)/all-binlogs
  displayName: Copy all binlogs
  continueOnError: true
  condition: succeededOrFailed()

# Publish all the binlogs we collected in the previous step
- task: PublishPipelineArtifact@1
  displayName: 'Publish Artifact: All binlogs'
  inputs:
    targetPath: $(Build.ArtifactStagingDirectory)/all-binlogs
    artifactName: ${{ parameters.uploadPrefix }}all-binlogs-test-${{ parameters.testPrefix }}-$(Build.BuildId)-$(System.StageAttempt)-$(System.JobAttempt)
  continueOnError: true
  condition: succeededOrFailed()

- bash: $(System.DefaultWorkingDirectory)/$(BUILD_REPOSITORY_TITLE)/tools/devops/automation/scripts/bash/collect-and-upload-crash-reports.sh
  displayName: 'Collect and upload crash reports'
  condition: always() # who knows when crash reports can end up being useful
  continueOnError: true
  env:
    MACIOS_TEST_PREFIX: ${{ parameters.testPrefix }}
    MACIOS_UPLOAD_PREFIX: ${{ parameters.uploadPrefix }}

# Be nice and clean behind you
- pwsh: |
    Import-Module ./MaciosCI.psd1
    Clear-AfterTests
  displayName: 'Cleanup'
  continueOnError: true
  workingDirectory: $(System.DefaultWorkingDirectory)/$(BUILD_REPOSITORY_TITLE)/tools/devops/automation/scripts
  condition: always() # no matter what, includes cancellation
